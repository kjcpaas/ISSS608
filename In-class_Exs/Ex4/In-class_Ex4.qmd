---
title: "In-class Exercise 4: Visualizing Stats and Models"
author: "Kristine Joy Paas"
date: "4 May 2024"
date-modified: "last-modified"
format: html
execute: 
  echo: true
  eval: true
  warning: false
  freeze: true
---

# 1 Overview

`ggstatsplot` enable plotting without calculating the statistics separately.

# 2 Getting Started

## 2.1 Loading the required packages

For this exercise we will use the following R packages:

-   [**tidyverse**](https://www.tidyverse.org/), a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.

-   [**ggstatsplot**](https://indrajeetpatil.github.io/ggstatsplot/), extension of [**ggplot2**](https://ggplot2.tidyverse.org/) package for creating graphics with details from statistical tests included in the information-rich plots themselves.

```{r}
#| label: setup
pacman::p_load(tidyverse, ggstatsplot)
set.seed(1234)
```

## 2.2 Loading the data

We will use the same `exam_data` dataset from [Hands-on Ex 1](/Hands-on_Exs/Ex1/Hands-on_Ex1) and load it into the RStudio environment using [read_csv()](https://readr.tidyverse.org/reference/read_delim.html).

```{r}
exam_data <- read_csv("data/Exam_data.csv")
glimpse(exam_data)
```

There are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.

-   The categorical attributes are: `ID`, `CLASS`, `GENDER` and `RACE`.

-   The continuous attributes are: `MATHS`, `ENGLISH` and `SCIENCE`.

# 3 Visualizing Stats

## 3.1 Using gghistostats

### 3.1.1 By stats type

::: panel-tabset
#### parametric

It used `mean`.

```{r}
gghistostats(
  data = exam_data,
  x = ENGLISH,
  type = "parametric",
  test.value = 60,
  bin.args = list(color = "black",
                  fill = "grey50",
                  alpha = 0.7),
  normal.curve = FALSE,
  normal.curve.args = list(linewidth = 2),
  xlab = "English scores"
)
```

#### np

It used `median`.

```{r}
gghistostats(
  data = exam_data,
  x = ENGLISH,
  type = "np",
  test.value = 60,
  bin.args = list(color = "black",
                  fill = "grey50",
                  alpha = 0.7),
  normal.curve = FALSE,
  normal.curve.args = list(linewidth = 2),
  xlab = "English scores"
)
```

#### robust

```{r}
gghistostats(
  data = exam_data,
  x = ENGLISH,
  type = "robust",
  test.value = 60,
  bin.args = list(color = "black",
                  fill = "grey50",
                  alpha = 0.7),
  normal.curve = FALSE,
  normal.curve.args = list(linewidth = 2),
  xlab = "English scores"
)
```

#### bayes

```{r}
gghistostats(
  data = exam_data,
  x = ENGLISH,
  type = "bayes",
  test.value = 60,
  bin.args = list(color = "black",
                  fill = "grey50",
                  alpha = 0.7),
  normal.curve = FALSE,
  normal.curve.args = list(linewidth = 2),
  xlab = "English scores"
)
```
:::

::: {.callout-tip appearance="simple"}
Reference lines default to corresponding mean, median, etc can be controlled by the `centrality` argument.
:::

### 3.1.2 Plotting Normal Distribution Curve

Previous plot, by default, do not have the normal distribution curve. Setting `normal.curve = TRUE` adds the normal distribution curve.

```{r}
gghistostats(
  data = exam_data,
  x = ENGLISH,
  type = "bayesian",
  test.value = 60,
  bin.args = list(color = "black",
                  fill = "grey50",
                  alpha = 0.7),
  normal.curve = TRUE,
  normal.curve.args = list(linewidth = 0.5),
  xlab = "English scores"
)
```

### 3.1.3 Extracting calculated stats

```{r}
p <- gghistostats(
  data = exam_data,
  x = ENGLISH,
  type = "parametric",
  test.value = 60,
  bin.args = list(
    color = "black",
    fill = "grey50",
    alpha = 0.7
  ),
  normal.curve = FALSE,
  normal.curve.args = list(linewidth = 2),
  xlab = "English scores"
)

extract_stats(p)
```

## 3.2 ggwithinstats

We need to pivot table long to have these columns: `ID`, `SUBJECT`, `SCORE`.

```{r}
exam_long <-exam_data %>% pivot_longer(
  cols = ENGLISH:SCIENCE,
  names_to = "SUBJECT",
  values_to = "SCORE") %>%
  filter(CLASS == "3A")

```

```{r}

ggwithinstats(
  data = filter(exam_long, SUBJECT %in% c("MATHS", "SCIENCE")),
  x = SUBJECT,
  y = SCORE,
  type = "np"
)
```

## 3.3 ggscatterstats

The best fit line is controlled by `smooth.line.args`

```{r}
ggscatterstats(
  data = exam_data,
  x = MATHS,
  y = ENGLISH,
  marginal = TRUE, # Show the histogram
  label.var = ID,
  label.expression = ENGLISH > 90 & MATHS > 90
)
```

# 4 Visualizing Models

`performance` package is also part of `easystats` package.

Refer to **Hands-on_Ex4A: 4 Model Visualizations**

# 5 Reflections
