---
title: "Take Home Ex3: VAST Challenge 2024 Mini-Challenge 3 [WIP]"
author: "Kristine Joy Paas"
date: "22 May 2024"
date-modified: "last-modified"
format: html
execute: 
  echo: true
  eval: true
  warning: false
  freeze: true
---

# 1 Overview

# 2 Setup

## 2.1 Loading Packages

```{r}
#| label: setup
pacman::p_load(
  jsonlite,
  tidyverse,
  ggraph,
  tidygraph,
  visNetwork,
  patchwork,
  ggtext,
  knitr,
  igraph,
  ggiraph
)
```

We will also set some values to have consistency throughout all graphs. This is also so that we don't have to search and replace all instances of these

```{r}
FONT_FAMILY = "Roboto Condensed"
PRIMARY_COLOR = "blue"
MUTED_COLOR = "grey50"
```

## 2.2 Loading Data

```{r}
mc3_data <- fromJSON("data/mc3.json")
glimpse(mc3_data)
```

It contains graph data, where nodes can be accessed via `nodes` and edges via `links`. This dataset has a lot of columns but we will only filter the relevant data during wrangling..

# 3 Data Wrangling

## 3.1 Extracting Graph Elements

For simplicity, we will only extract the columns that are needed to do graph analysis. We will also *ignore* the time elements for now so we will not be including them in the analysis.

::: panel-tabset
### Nodes

The nodes represent the entities in the network. They can be people or companies.

```{r}
mc3_nodes_raw <- as_tibble(mc3_data$nodes)
glimpse(mc3_nodes_raw)
```

We will only retain the following columns:

-   `id` - to serve as the identifier for the node

-   `type` - to differentiate people from companies in the graph.

```{r}
mc3_nodes_lite <- mc3_nodes_raw %>% select(id, type)
```

### Edges

The edges represent the relationship between different nodes.

```{r}
mc3_edges_raw <- as_tibble(mc3_data$links)
glimpse(mc3_edges_raw)
```

We will only retain the following columns:

-   `source` - to identify the *actor* of the relationship, corresponds to `id` in nodes.

-   `target` - to identify the *receiver* of the relationship, corresponds to `id` in nodes.

-   `type` - to identify the type of the relationship

```{r}
mc3_edges_lite <- mc3_edges_raw %>% select(source, target, type)
```
:::

## 3.2 Closer look at *type*

Both the `nodes` and `edges` have `type` which contains the type of the nodes and edges. We will assign a `supertype` and a `subtype` from `type`.

::: panel-tabset
### Nodes

```{r}
(mc3_nodes_lite$type) %>% unique()
```

`supertype` - type of entity, either *Person* or *Organization*

`subtype` - subcategory of *supertype*, e.g., *Company, FishingCompany, CEO*

### Edges

```{r}
(mc3_edges_lite$type) %>% unique()
```

`supertype` - type of relationship, either *Ownership*, *Employment, Relationship.*

`subtype` - subcategory of *supertype*, e.g., *Shareholdership, BeneficialOwnership, FamilyRelationship*
:::

## 3.3 Preparing the data

With the considerations above, we will shape the data needed for our graph visualization.

::: panel-tabset
### Nodes

For nodes, we will also assign a shape for visualization depending on *supertype.* For people, we will use üìê, while we use üî¥ for organizations.

Lastly, we will assign numbers to each node as an alternative label to the ids (as they are long).

```{r}
PERSON_SHAPE = "triangle"
ORGANIZATION_SHAPE = "circle"

mc3_nodes_clean <- mc3_nodes_lite %>%
  mutate(
    supertype = strsplit(type, ".", fixed=TRUE) %>% sapply('[', 2),
    # Get the last type as subtype. In the case of Entity.Person,
    # both supertype and subtype are "Person".
    subtype = strsplit(type, ".", fixed=TRUE) %>% sapply(tail, n=1),
    num = row_number(),
    shape = ifelse(supertype == "Person", PERSON_SHAPE, ORGANIZATION_SHAPE)
  ) %>%
  select(id, num, supertype, subtype, shape)

kable(head(mc3_nodes_clean))
```

Let's also check if `supertype`, `subtype`, and `shape` have been mapped correctly.

```{r}
mc3_nodes_clean %>%
  group_by(supertype, subtype, shape) %>%
  summarize(count = n()) %>%
  arrange(-count) %>%
  kable()
```

### Edges

For `ggraph` to plot the edges correctly, we need to assigns weights to the edges. For simplicity, let us assign the number of edges with the same `source`, `target` and `type`.

Lastly, we will change `source` and `target` to `from` and `to`, respectively for compatibility with network functions we will use.

```{r}
mc3_edges_clean <- mc3_edges_lite %>%
  rename(from = source, to = target, ) %>%
  mutate(
    supertype = ifelse(
      grepl("Event.Owns", type),
      "Ownership",
      ifelse(grepl("Relationship", type), "Relationship", "Employment")
    ),
    subtype = strsplit(type, ".", fixed = TRUE) %>% sapply(tail, n = 1)
  ) %>%
  filter(from != to) %>%
  group_by(from, to, supertype, subtype) %>%
  summarize(weight = n())

kable(head(mc3_edges_clean))
```

Lastly, let's check if `type` has been mapped correctly to `supertype` and `subtype`.

```{r}
mc3_edges_clean %>%
  group_by(supertype, subtype) %>%
  summarize(count = n()) %>%
  arrange(-count) %>%
  kable()
```
:::

## 3.4 Preparing the supernetwork

We will prepare the supernetwork from the nodes and edges we prepared.

```{r}
supernetwork = tbl_graph(edges = mc3_edges_clean,
                         nodes = mc3_nodes_clean,
                         directed = TRUE)
```

We call this a supernetwork as this is a collection of smaller, unconnected networks.

```{r}
#| echo: false
# Clean up environment
rm(mc3_edges_lite, mc3_nodes_clean)
```

# 4 Investigating *SouthSeafood Express Corp*

From VAST Challenge 2024 [Mini-case 3](https://vast-challenge.github.io/2024/MC3.html):

> Identify the network associated with SouthSeafood Express Corp and visualize how this network and competing businesses change as a result of their illegal fishing behavior. Which companies benefited from SouthSeafood Express Corp legal troubles? Are there other suspicious transactions that may be related to illegal fishing? Provide visual evidence for your conclusions.

::: callout-tip
## Solving the smaller problem first

Although the question about *SouthSeafood Express Corp* is the last question, we will start with investigating its relationships so we can generalize to make inferences to the rest of the network, for Question 3.
:::

To do the investigation, our strategy is to start with the smallest network first to the biggest. We will be looking at:

1.  Direct neighbors - They have the strongest influence on and can be influenced the most by *SouthSeafood Express Corp.*
2.  Sphere of influence - Based on Nicholas A. Christakis and James H. Fowler's theory of [**Three Degrees of Influence**](https://www.strategy-business.com/article/10218), which states that that influence gradually dissipates and eventually cease to be notable beyond the **3rd degree of separation**.
3.  Full connected network - We will look at the entire network containing the nodes that have paths to *SouthSeafood Express Corp.*

In order to do this, we need to identify the *SouthSeafood Express Corp* node first.

```{r}
ssfec_node <- which(V(supernetwork)$id == "SouthSeafood Express Corp")
```

We will use `ego()` and `induced_graph()` functions from `igraph` to generate the subnetworks related to this node.

We will use the function below to get the subgraphs:

::: {.callout-important collapse="true"}
## RStudio breaks when defining functions in Quarto doc

Rstudio breaks as soon as I type `function(){}` in a code chunk in a Quarto document.

This results in not being able to save the file and not being able to run any code chunk. Hence, the function is defined in a separate R file and included in this doc.
:::

```{r}
#| file: extract_subgraph.R
```

```{r, include = FALSE}
#| echo: false
extract_subgraph <- source("extract_subgraph.R", local = knitr::knit_global())$value
```

## 4.1 Direct Neighbors

### 4.1.1 Extracting the subgraph

We will first extract the direct neighbors for *SouthSeafood Express Corp*.

```{r}
ssfec_direct_neighbors <- extract_subgraph(supernetwork, ssfec_node, distance = 1)
```

We will also add focus on the *SouthSeafood Express Corp* node to emphasize it in the plot.

```{r}
ssfec_direct_neighbors <- ssfec_direct_neighbors %>%
  mutate(focus = (id == "SouthSeafood Express Corp"))
```

### 4.1.2 Plotting the graph

Finally, we can plot the graph of *SouthSeafood Express Corp* direct neighbors.

```{r}
#| code-fold: true
#| code-summary: 'Show ggraph code'
ggraph(ssfec_direct_neighbors, layout = "linear", circular = TRUE) +
  # Render nodes
  geom_node_point(aes(color = focus, shape = shape), show.legend = FALSE, size = 30) +
  geom_node_text(
    aes(label = str_wrap(id, width = -1)),
    family = FONT_FAMILY,
    size = 3,
    color = "white"
  ) +
  scale_color_manual(values = c(MUTED_COLOR, PRIMARY_COLOR)) +
  
  # Render edges
  geom_edge_link(
    aes(label = subtype),
    # Control arrow
    arrow = arrow(type = "closed", length = unit(0.025, "npc")),
    end_cap = circle(12, "mm"),
    start_cap = circle(12, "mm"),
    # Format labels
    angle_calc = "along",
    label_dodge = unit(0.04, "npc"),
    family = FONT_FAMILY,
    show.legend = FALSE
  ) +
  
  # Hack to reduce distance between nodes
  # This is to not clip the nodes in the edge of the plot
  # ref: https://stackoverflow.com/a/66991383
  ylim(-1.3, 0.8) +
  xlim(-1, 1) +
  
  # Style graph
  unset_graph_style() +
  theme_graph(base_family = FONT_FAMILY, plot_margin = margin(0)) +
  plot_annotation(
    title = "SouthSeafood Express Corp's Shareholders",
    subtitle = "Two other fishing companies, <span style='color:blue;'>**AguaLeska Transit N.V.**</span> and <span style='color:blue;'>**Tainamarine Fishing Co**</span> hold shares in<br />SouthSeafood Express Corp. They are posed to benefit the most from the company's illegal fishing activities.") &
  theme(
    text = element_text(family = FONT_FAMILY),
    plot.title = element_text(face = "bold", size = rel(1.2)),
    plot.subtitle = element_markdown(color = "grey50", , size = rel(0.9))
  )
```

::: callout-tip
#### Insights

As shareholders, **AguaLeska Transit N.V.** and **Tainamarine Fishing Co** have big influence on where the resources of *SouthSeafood Express Corp* go.

In this case, most of it will most likely opposite of the arrow direction, i.e. benefitting the shareholders.
:::

## 4.2 Sphere of influence

### 4.2.1 Extracting the subgraph

We will first extract the direct neighbors for *SouthSeafood Express Corp.* We will use `distance=3`, based on [**Three Degrees of Influence**](https://www.strategy-business.com/article/10218).

```{r}
ssfec_sphere_of_influence <- extract_subgraph(supernetwork, ssfec_node, distance = 3)
```

We will also add focus on the *SouthSeafood Express Corp* node to emphasize it.

```{r}
ssfec_sphere_of_influence <- ssfec_sphere_of_influence %>%
  mutate(focus = (id == "SouthSeafood Express Corp"))
```

### 4.2.2 Plotting the graph

Finally, we can plot the graph of *SouthSeafood Express Corp's* sphere of influence.

```{r}
#| code-fold: true
#| code-summary: 'Show ggraph code'
set.seed(911)
g <- ggraph(ssfec_sphere_of_influence, layout = "nicely") +
  geom_point_interactive(
    aes(
      x = x, y = y, data_id = id,
      tooltip = paste0(id, " (", num, ")"),
      color = focus, shape = shape
    ),
    size = 7.5,
    show.legend = FALSE
    )+
  geom_node_text(
    aes(label = num),
    family = FONT_FAMILY,
    size = 2,
    color = 'white'
  ) +
  geom_edge_link(
    aes(label = subtype),
    arrow = arrow(type = "closed", length = unit(0.01, "npc")),
    end_cap = circle(4, "mm"),
    start_cap = circle(4, "mm"),
    angle_calc = "along",
    label_dodge = unit(0.02, "npc"),
    label_size = 2,
    family = FONT_FAMILY
  ) +
  scale_color_manual(values = c(MUTED_COLOR, PRIMARY_COLOR)) +
  
  # Style graph
  unset_graph_style() +
  theme_graph(base_family = FONT_FAMILY, plot_margin = margin(0)) +
  plot_annotation(title = "SouthSeafood Express Corp's Sphere of Influence",
                  subtitle = "Entities with 3 degrees of separation from SouthSeafood Express Corp",
                  caption = "*Hover on the nodes to see their names*") &
  theme(
    text = element_text(family = FONT_FAMILY),
    plot.title = element_text(face = "bold", size = rel(1.2)),
    plot.subtitle = element_markdown(color = "grey50", size = rel(0.9)),
    plot.caption = element_markdown(color = "grey50", size = rel(0.75))
  )

# Add interactive elements
tooltip_css = paste0(
  "background-color:black;color:white;font-family:",
  FONT_FAMILY,
  ";padding:4px;"
)

girafe(                                  
  ggobj = g,                             
  width_svg = 6,                         
  height_svg = 6*0.618,
  options = list(
    opts_tooltip(css = tooltip_css)
  )
)
```

::: callout-tip
#### Insights

The network map is comprised mostly of *Shareholderships* and *BenificialOwnerships.*

*SouthSeafood Express Corp's (60464)* shareholders, **AguaLeska Transit N.V. (60429)** and **Tainamarine Fishing Co (60468)** have other shareholders.

**StichtingMarine Shipping Company (60466)** holds shares of these companies (through other companies). **SavanetaCreek Solutions NV (60461)**, a Logistics Company holds shareholdership on this Fishing Company as well. These 2 nodes **collect the resources** from the other companies they hold shares in, which their owners and shareholders ultimately benefit in.

Furthermore, **Liam Conti (60477)** and **Fintan Park (60479)** are the beneficial owners of these companies so they have the final decision-making power and **benefit the most** from the resources in the network. Lastly, as Liam Conti's family member, **Nadia Conti (60478)** may also benefit from Liam's ownership of companies.

From our intuition, these 5 nodes are candidates to be the influential nodes in the network.
:::

## 4.3 Getting the best-fit centrality measure

Next, we will get the best centrality metric that can match our intuition. To better see the fit, we will focus on the candidate influential nodes we have identified.

```{r}
ssfec_influential_candidates <- ssfec_sphere_of_influence %>%
  mutate(focus = (id %in% c(
    "StichtingMarine Shipping Company", # Collector of resources
    "SavanetaCreek Solutions NV", # Collector of resources
    "Liam Conti", # Beneficiary
    "Nadia Conti", # Beneficiary
    "Fintan Park" # Beneficiary
  )))
```

```{r}
#| code-fold: true
#| code-summary: 'Show ggraph code'
set.seed(911)
g <- ggraph(ssfec_influential_candidates, layout = "nicely") +
  geom_point_interactive(
    aes(
      x = x, y = y, data_id = id,
      tooltip = paste0(id, " (", num, ")"),
      color = focus, shape = shape
    ),
    size = 7.5,
    show.legend = FALSE
    )+
  geom_node_text(
    aes(label = num),
    family = FONT_FAMILY,
    size = 2,
    color = 'white'
  ) +
  geom_edge_link(
    aes(label = subtype),
    arrow = arrow(type = "closed", length = unit(0.01, "npc")),
    end_cap = circle(4, "mm"),
    start_cap = circle(4, "mm"),
    angle_calc = "along",
    label_dodge = unit(0.02, "npc"),
    label_size = 2,
    family = FONT_FAMILY
  ) +
  scale_color_manual(values = c(MUTED_COLOR, PRIMARY_COLOR)) +
  
  # Style graph
  unset_graph_style() +
  theme_graph(base_family = FONT_FAMILY, plot_margin = margin(0)) +
  plot_annotation(title = "SouthSeafood Express Corp's Sphere of Influence",
                  subtitle = "Highlighted are the candidates for influential nodes in the network",
                  caption = "*Hover on the nodes to see their names*") &
  theme(
    text = element_text(family = FONT_FAMILY),
    plot.title = element_text(face = "bold", size = rel(1.2)),
    plot.subtitle = element_markdown(color = "grey50", size = rel(0.9)),
    plot.caption = element_markdown(color = "grey50", size = rel(0.75))
  )

# Add interactive elements
tooltip_css = paste0(
  "background-color:black;color:white;font-family:",
  FONT_FAMILY,
  ";padding:4px;"
)

girafe(                                  
  ggobj = g,                             
  width_svg = 6,                         
  height_svg = 6*0.618,
  options = list(
    opts_tooltip(css = tooltip_css)
  )
)
```

### 4.3.1 Candidate Centralities

After reading on the different centralities, the potential candidates are [**eigenvector centrality**](https://vod.video.cornell.edu/media/32+-+Introduction+to+Eigenvalues+and+Eigenvectors+Session+32/1_fi5tfhbm/114208531) and HITS algorithm or [**hubs and authority centrality**](https://pi.math.cornell.edu/~mec/Winter2009/RalucaRemus/Lecture4/lecture4.html)**.**

::: panel-tabset
#### Eigenvector

The principle of eigenvector centrality is *the more important your neighbors are, the more important you are.*

As seen in the graph, the candidate nodes are close to each other and therefore are neighbors to important nodes.

#### Hubs and Authorities

Authorities are where the nodes that other nodes point to, while hubs are nodes that point towards authorities.

This seems to be the **most fit** for our context. However, we have to reverse the arrows for most cases as the resource flow is opposite the majority of the arrows we have, i.e. company benefits the shareholders and owners.
:::

### 4.3.2 Initial look at centralities

In the graphs below, the bigger the node, the higher their centrality score. The bigger the node is, the more important they are.

#### 4.3.2.1 Hub and Authority

We will not look at this for now as we will look at it in the context of resource flow.

#### 4.3.2.2 Eigenvector

Let us first calculate the centrality scores.

```{r}
ssfec_influential_init_centralities <- ssfec_influential_candidates %>%
  mutate(eigen_score = centrality_eigen())
```

::: panel-tabset
##### Graph

Then, let us plot with the consideration of the eigen scores.

```{r}
#| code-fold: true
#| code-summary: 'Show ggraph code'
set.seed(911)
g <- ggraph(ssfec_influential_init_centralities, layout = "nicely") +
  geom_point_interactive(
    aes(
      x = x, y = y, data_id = id,
      tooltip = paste0(id, " (", num, ")"),
      color = focus, shape = shape,
      size = eigen_score
    ),
    show.legend = FALSE
    )+
  geom_node_text(
    aes(label = num),
    family = FONT_FAMILY,
    size = 2,
    color = 'white'
  ) +
  geom_edge_link(
    aes(label = subtype),
    arrow = arrow(type = "closed", length = unit(0.01, "npc")),
    end_cap = circle(4, "mm"),
    start_cap = circle(4, "mm"),
    angle_calc = "along",
    label_dodge = unit(0.02, "npc"),
    label_size = 2,
    family = FONT_FAMILY
  ) +
  scale_color_manual(values = c(MUTED_COLOR, PRIMARY_COLOR)) +
  scale_size_continuous(range=c(5, 15)) +
  
  # Style graph
  unset_graph_style() +
  theme_graph(base_family = FONT_FAMILY, plot_margin = margin(0)) +
  plot_annotation(title = "SouthSeafood Express Corp's Sphere of Influence",
                  subtitle = "Highlighted are the candidates for influential nodes in the network",
                  caption = "*Hover on the nodes to see their names*") &
  theme(
    text = element_text(family = FONT_FAMILY),
    plot.title = element_text(face = "bold", size = rel(1.2)),
    plot.subtitle = element_markdown(color = "grey50", size = rel(0.9)),
    plot.caption = element_markdown(color = "grey50", size = rel(0.75))
  )

# Add interactive elements
tooltip_css = paste0(
  "background-color:black;color:white;font-family:",
  FONT_FAMILY,
  ";padding:4px;"
)

girafe(                                  
  ggobj = g,                             
  width_svg = 6,                         
  height_svg = 6*0.618,
  options = list(
    opts_tooltip(css = tooltip_css)
  )
)
```

##### Centrality Table

```{r}
#| code-fold: true
#| code-summary: 'Show table code'
ssfec_influential_init_centralities %>%
  activate(nodes) %>%
  arrange(-eigen_score) %>%
  select(id, num, supertype, subtype, eigen_score) %>%
  kable()
```
:::

**4 out of 5** of are candidate nodes have the highest eigenvector centrality values in our network. Because of this, there is a high likelihood that this metric fits our context.

However, as we are looking to answer *"which companies benefited from SouthSeafood Express Corp legal troubles"*, the result of this metric is contradicting as **Tainamarine Fishing Co** has lower score than **SouthSeafood Express Corp**, while **AguaLeska Transit N.V.**.

These 2 companies should be benefiting from **SouthSeafood Express Corp.**

We will compare this result after we build the resource flow.

### 4.3.3 Building the resource flow edges

#### 4.3.3.1 Where do resources flow in each relationship type?

To model the resource flow, we need to set the following:

-   Arrow direction - direction of the resource flow

-   Weight - The higher this is, more the resource flow

Take note that the models are **subjective** and we can adjust the values accordingly.

::: panel-tabset
##### Shareholdership

**Current**: Shareholder -\> Company, weight: 1

**Proposed**: Shareholder \<- Company, weight: 2

**Rationale**: Although shareholders in a company may not necessarily benefit from the resources of a company (the Benificial Owner does), they are important decision makers in the company so they have some form of control over the company resources.

##### BeneficialOwnership

**Current**: BeneficialOwner -\> Company, weight: 1

**Proposed**: BeneficialOwner \<- Company, weight: 3

**Rationale**: BeneficialOwners are the ultimate decision makers and the main beneficiary of their company. Hence, they have higher control of the resources over Shareholders.

##### FamilyRelationship

**Current**: Person1 -\> Person2, weight: 1

**Proposed**: Person1 \<-\> Person2, weight: 1

**Rationale**: Assuming the family has a good relationship, they share resources so they benefit from each others' resources. The influence of a family member on another member can be an important factor in the network as they may influence the decision-making for the companies their family own. For simplicity, let's assume that family members only share resources.

##### WorksFor

**Current**: Employee -\> Employer, weight: 1

**Proposed**: Employee -\> Employer, weight: 2

**Rationale**: Employee answers to the employer and work on the instruction of the employer.
:::

#### 4.3.3.2 Generating resource flow

Based on the considerations above, we will generate edges representing the resource flow from the edges dataframes. We will define functions for this.

::: panel-tabset
##### Convert edges

```{r}
#| file: convert_edges_to_resource_flow.R
```

```{r, include = FALSE}
#| echo: false
convert_edges_to_resource_flow <- source("convert_edges_to_resource_flow.R", local = knitr::knit_global())$value
```

##### Convert graph

```{r}
#| file: convert_graph_to_resource_flow.R
```

```{r, include = FALSE}
#| echo: false
convert_graph_to_resource_flow <- source("convert_graph_to_resource_flow.R", local = knitr::knit_global())$value
```
:::

#### 4.3.3.3 Plotting the resource graph

```{r}
ssfec_influence_resource <- convert_graph_to_resource_flow(ssfec_influential_init_centralities)
```

::: panel-tabset
##### Resource Graph

```{r}
#| code-fold: true
#| code-summary: 'Show ggraph code'
set.seed(911)
g <- ggraph(ssfec_influence_resource, layout = "nicely") +
  geom_point_interactive(
    aes(
      x = x, y = y, data_id = id,
      tooltip = paste0(id, " (", num, ")"),
      color = focus, shape = shape
    ),
    size = 7.5,
    show.legend = FALSE
    )+
  geom_node_text(
    aes(label = num),
    family = FONT_FAMILY,
    size = 2,
    color = 'white'
  ) +
  geom_edge_link(
    aes(label = subtype),
    arrow = arrow(type = "closed", length = unit(0.01, "npc")),
    end_cap = circle(4, "mm"),
    start_cap = circle(4, "mm"),
    angle_calc = "along",
    label_dodge = unit(0.02, "npc"),
    label_size = 2,
    family = FONT_FAMILY
  ) +
  scale_color_manual(values = c(MUTED_COLOR, PRIMARY_COLOR)) +
  
  # Style graph
  unset_graph_style() +
  theme_graph(base_family = FONT_FAMILY, plot_margin = margin(0)) +
  plot_annotation(title = "SouthSeafood Express Corp's Sphere of Influence",
                  subtitle = "Entities with 3 degrees of separation from SouthSeafood Express Corp",
                  caption = "*Hover on the nodes to see their names*") &
  theme(
    text = element_text(family = FONT_FAMILY),
    plot.title = element_text(face = "bold", size = rel(1.2)),
    plot.subtitle = element_markdown(color = "grey50", size = rel(0.9)),
    plot.caption = element_markdown(color = "grey50", size = rel(0.75))
  )

# Add interactive elements
tooltip_css = paste0(
  "background-color:black;color:white;font-family:",
  FONT_FAMILY,
  ";padding:4px;"
)

girafe(                                  
  ggobj = g,                             
  width_svg = 6,                         
  height_svg = 6*0.618,
  options = list(
    opts_tooltip(css = tooltip_css)
  )
)
```

##### Original Graph

```{r}
#| code-fold: true
#| code-summary: 'Show ggraph code'
set.seed(911)
g <- ggraph(ssfec_influential_init_centralities, layout = "nicely") +
  geom_point_interactive(
    aes(
      x = x, y = y, data_id = id,
      tooltip = paste0(id, " (", num, ")"),
      color = focus, shape = shape
    ),
    size = 7.5,
    show.legend = FALSE
    )+
  geom_node_text(
    aes(label = num),
    family = FONT_FAMILY,
    size = 2,
    color = 'white'
  ) +
  geom_edge_link(
    aes(label = subtype),
    arrow = arrow(type = "closed", length = unit(0.01, "npc")),
    end_cap = circle(4, "mm"),
    start_cap = circle(4, "mm"),
    angle_calc = "along",
    label_dodge = unit(0.02, "npc"),
    label_size = 2,
    family = FONT_FAMILY
  ) +
  scale_color_manual(values = c(MUTED_COLOR, PRIMARY_COLOR)) +
  
  # Style graph
  unset_graph_style() +
  theme_graph(base_family = FONT_FAMILY, plot_margin = margin(0)) +
  plot_annotation(title = "SouthSeafood Express Corp's Sphere of Influence",
                  subtitle = "Entities with 3 degrees of separation from SouthSeafood Express Corp",
                  caption = "*Hover on the nodes to see their names*") &
  theme(
    text = element_text(family = FONT_FAMILY),
    plot.title = element_text(face = "bold", size = rel(1.2)),
    plot.subtitle = element_markdown(color = "grey50", size = rel(0.9)),
    plot.caption = element_markdown(color = "grey50", size = rel(0.75))
  )

# Add interactive elements
tooltip_css = paste0(
  "background-color:black;color:white;font-family:",
  FONT_FAMILY,
  ";padding:4px;"
)

girafe(                                  
  ggobj = g,                             
  width_svg = 6,                         
  height_svg = 6*0.618,
  options = list(
    opts_tooltip(css = tooltip_css)
  )
)
```
:::

The resource graph now represents the flow of resource, which can help us trace who benefits from a node's activities. We can now recompute the centralities and the resource flow.

# References

<https://blogs.cornell.edu/info2040/2015/10/19/three-degrees-of-influence-how-far-can-you-reach-people/>

<https://www.strategy-business.com/article/10218>

<https://www.youtube.com/watch?v=-kiKUYM9Qq8>

<https://pi.math.cornell.edu/~mec/Winter2009/RalucaRemus/Lecture4/lecture4.html>

<https://vod.video.cornell.edu/media/32+-+Introduction+to+Eigenvalues+and+Eigenvectors+Session+32/1_fi5tfhbm/114208531>
