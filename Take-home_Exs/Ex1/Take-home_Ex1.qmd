---
title: "Take-home Exercise 1: Creating Visualization Beyond Default - Singapore Private Residential Property Market for 2024 Q1"
author: "Kristine Joy Paas"
date: "16 April 2024"
date-modified: "last-modified"
format: html
execute: 
  echo: true
  eval: true
  warning: false
  freeze: true
---

# 1 Overview

## 1.1 Background

Singapore has one of the highest home ownership rates in the world at 89.7%, [2nd only to Russia among the G20](https://tradingeconomics.com/country-list/home-ownership-rate?continent=g20) countries. Due to Singapore's successful public housing program, [77.8% of Singapore residents live in HDB flats](13+%20Housing%20&%20Household%20Statistics%20in%20Singapore%20(2024)), while 22% live in private properties like condos or landed properties.

While the HDB market targets Singaporeans with household income of up to 14,000 SGD, the private housing market is Singapore is still in demand for households looking to upgrade, invest their property, and for residents not eligible for public housing (e.g. high income household, foreigners, etc.)

In this exercise we will look at the market trends for private residential property market for 2024 Q1 and see how the economic factors have affected it.

## 1.2 Loading the data sources

For this exercise, we will use the residential real estate transaction data from [REALIS](https://www.ura.gov.sg/reis/index). This provides comprehensive and up-to-date statistics on the private property market in Singapore.

The dataset has been provided via eLearn and added to the `data/` folder of this exercise.

::: {.callout-note collapse="true"}
### File Structure

![](images/file_structure.png)
:::

For the purposes of this exercise, we will refer to each data as the following:

-   **2023Q1**: `ResidentialTransaction20240308160536.csv`

-   **2023Q2**: `ResidentialTransaction20240308160736.csv`

-   **2023Q3**: `ResidentialTransaction20240308161009.csv`

-   **2023Q4**: `ResidentialTransaction20240308161109.csv`

-   **2024Q1**: `ResidentialTransaction20240414220633.csv`

## 1.3 Methodology

To start the data analysis, we first need to prepare the R environment for analysis. This includes loading the R packages and loading the datasets.

After the setup, we need to do **data wrangling** where we clean and transform the data into a form that is fitting for our analysis. This will possible entail removing irrelevant data, deriving additional variables, renaming columns, etc.

As part of wrangling, we need to decide on what data we would like to look at closely. For the purposes of this exercise, these are the data we can look at that can potentially give valuable insights:

-   Total units sold by quarter

-   Units sold by submarkets such as property type (e.g. condominium, terrace house, apartment, detached house), sale type (e.g. resale, new sale, subsale), etc.

-   Transaction price by submarkets such property type (e.g. condominium, terrace house, apartment, detached house, etc), sale type (e.g. resale, new sale, subsale), etc.

Finally, we will do data exploration and visualize the insights gained from the data. Some of the questions we would ask are:

-   What is the general trend of private residential property sales prices?

-   Is this trend consistent among all submarkets?

-   How affordable are private residential properties for Singaporean households?

# 2 Setup

## 2.1 Loading the R packages

For this exercise, we will mainly use the following packages for data analysis:

-   [tidyverse](https://www.tidyverse.org/): A collection of R packages used in data science, which includes [ggplot2](https://ggplot2.tidyverse.org/), [tibble](https://tibble.tidyverse.org/), [readr](https://readr.tidyverse.org/), among others
-   [ggdist](https://mjskay.github.io/ggdist/): Provides functions for presenting distributions in `ggplot2`. `stat_halfeye()` and `stat_dots()` will be used the most.
-   [ggtext](https://wilkelab.org/ggtext/): Enhances text rendering for `ggplot2`. `element_markdown()` is most notable function used for markdown rendering so we can highlight important information in text.
-   [ggrepel](https://ggrepel.slowkow.com/): Manages overlapping texts and labels on `ggplot2`. We will use this to render labels on dense plots.
-   [patchwork](https://patchwork.data-imaginist.com/): Allows composition of multiple graphs into a single plot

Aside from these, we will also include other packages that will help us present the data better.

-   [knitr](https://www.rdocumentation.org/packages/knitr/versions/1.45): Provides tools for dynamic report generation in R. For this exercise, we will use this package to render our tables better.
-   [scales](https://scales.r-lib.org/): Extends functions to operate on `ggplot2` scales. For this exercise, we will use `wrap_format()` to wrap long texts.

```{r}
#| label: setup
pacman::p_load(knitr,
               tidyverse,
               patchwork,
               ggdist,
               ggtext,
               ggrepel,
               scales)
```

## 2.2 Data Checkpoints

As the analysis is expected to have a lot of intermediate steps, **Save**, **Load**, and **Data clear** points are available to make our data wrangling more efficient.

::: callout-tip
### Save point

This is where data is written as `rds` files using `write_rds()` for important data sets that will be used in later analysis. Examples are:

-   Data we need to prepare for analysis
-   Critical outputs of expensive calculations
-   Cleaned up data for lightweight processing
:::

::: callout-note
### Load point

This is where data is loaded from `rds` files using `read_rds()`. They were previously generated by the save point.

**TIP**: Skip to the load points to progress without running the code above it
:::

::: callout-warning
### Data clear point

This is where data that will not be used anymore are cleared. The data in RStudio environment will pile up and will make it more difficult to check the relevant data in each part.

We can set `#| eval: false` in code chunks if we want skip the clearing. For example, the code below won't be run.

```{r}
#| eval: false
message <- "This code chunk executed"
```
:::

To use these checkpoints, we need to create `data/rds` folder.

# 3 Data Wrangling

## 3.1 Importing the datasets

Upon inspection of the csv files, column names have human-readable titles such as "Project Name", "Transacted Price (\$)", etc. While good for humans, these column names may cause parsing issues with R, especially as there are special characters.

Because of this, we will rename the columns in their UPPER_CASE format after removing the special characters. We will create a helper function that will help us accomplish this:

```{r}
rename_realis_column <- function(orig_name) {
  # Add underscores to spaces
  gsub(" +", "_",
       # Remove special characters
       gsub("[^A-Z ]", "",
            # Convert to upper case and remove trailing spaces
            toupper(orig_name)) %>% trimws())
}
```

We will use `read_csv()` to import each file and use `rename_realis_column()` in the `rename_with()` function.

::: panel-tabset
### 2023 Q1

```{r}
realis_2023q1 <- read_csv('data/ResidentialTransaction20240308160536.csv') %>%
                  rename_with(rename_realis_column)
kable(head(realis_2023q1, n=7))
```

There are **4,722** private residential propertysales for 2023 Q1.

### 2023 Q2

```{r}
realis_2023q2 <- read_csv('data/ResidentialTransaction20240308160736.csv') %>%
                  rename_with(rename_realis_column)
kable(head(realis_2023q2, n=7))
```

There are **6,125** private residential property sales for 2023 Q2.

### 2023 Q3

```{r}
realis_2023q3 <- read_csv('data/ResidentialTransaction20240308161009.csv') %>%
                  rename_with(rename_realis_column)
kable(head(realis_2023q3, n=7))
```

There are **6,206** private residential property sales for 2023 Q3.

### 2023 Q4

```{r}
realis_2023q4 <- read_csv('data/ResidentialTransaction20240308161109.csv') %>%
                  rename_with(rename_realis_column)
kable(head(realis_2023q4, n=7))
```

There are **4,851** private residential property sales for 2023 Q4.

### 2024 Q1

```{r}
realis_2024q1 <- read_csv('data/ResidentialTransaction20240414220633.csv') %>%
                  rename_with(rename_realis_column)
kable(head(realis_2024q1, n=7))
```

There are **4,902** private residential property sales for 2024 Q1.
:::

```{r}
glimpse(realis_2023q1)
```

The imported dataset has 21 variables.

## 3.2 Combining the dataframes

Next, we will combine all 5 `realis_202*q*` dataframes into a single one to simplify aggregation and partitioning of data for analysis.

This will also simplify cleanup and transformation as they will be done on a single dataframe instead of 5.

To do this, we need to add `QUARTER` values to each dataframe before merging them to a single one. We will use the format `<YEAR>Q<QUARTER>`, i.e `2024Q1` for 2024 Q1. This is so we can identify which quarter the sale was made, which we will use for aggregation.

::: {.callout-note appearance="simple"}
### Functions used

-   `mutate()` for adding new column

-   `rbind()` for combining all dataframes

-   `seq_len()` and `nrow()` for generating a sequence of IDs

-   `sprintf()` for formatting a string.
:::

::: panel-tabset
### Adding QUARTER column

```{r}
realis_2023q1 <- mutate(realis_2023q1, QUARTER="2023Q1")
realis_2023q2 <- mutate(realis_2023q2, QUARTER="2023Q2")
realis_2023q3 <- mutate(realis_2023q3, QUARTER="2023Q3")
realis_2023q4 <- mutate(realis_2023q4, QUARTER="2023Q4")
realis_2024q1 <- mutate(realis_2024q1, QUARTER="2024Q1")
```

### Combining data frames

```{r}
realis <- realis_2023q1 %>%
  rbind(realis_2023q2) %>%
  rbind(realis_2023q3) %>%
  rbind(realis_2023q4) %>%
  rbind(realis_2024q1)
kable(head(realis, n=10))
```

### Adding transaction ID's (TXN_ID)

We will also add `TXN_ID` so we can more easily refer to the observations later on. The format is `TXN00000`.

```{r}
realis$TXN_ID <- sprintf("TXN%05d", seq_len(nrow(realis)))
```

### Verifying the result

Let us check if all rows are accounted for by checking if the number of rows in `realis` is the total number of rows from all dataframes.

```{r}
nrow(realis) == nrow(realis_2023q1) +
  nrow(realis_2023q2) +
  nrow(realis_2023q3) +
  nrow(realis_2023q4) +
  nrow(realis_2024q1)
```
:::

## 3.3 Filtering relevant columns

After adding the `QUARTER` and `TXN_ID` columns, there are now 23 variables in the dataframe. However, not all of them are relevant to answer the questions we are asking. The table below summarizes the columns and whether we will keep them or not.

::: panel-tabset
### Columns Retained

| Column Name      | Description                                                                                                                | Reason                                   |
|------------------|------------------------|-------------------------------|
| TXN_ID           | Identifier for the transaction                                                                                             | It is an identifier                      |
| QUARTER          | Quarter when the property was sold                                                                                         | Core data for aggregation                |
| PROJECT_NAME     | Name of the project                                                                                                        | Can be used to pinpoint popular projects |
| TRANSACTED_PRICE | Transaction price (SGD)                                                                                                    | Useful for deriving insights             |
| AREA_SQFT        | Area of the property in sqft                                                                                               | Useful for deriving insights             |
| UNIT_PRICE_PSF   | Price per sqft                                                                                                             | Useful for price analysis                |
| TYPE_OF_SALE     | One of *New Sale*, *Resale*, *Subsale*                                                                                     | Important submarket information          |
| TYPE_OF_AREA     | One of *Landed*, *Strata*                                                                                                  | Can be used to partition data            |
| PROPERTY_TYPE    | Type of Property, e.g. *Apartment, Condominium, Executive Condominium, Terrace House, Semi-Detached House, Detached House* | Can be used to partition data            |
| NUMBER_OF_UNITS  | Number of units involved in the transaction                                                                                | Core data for analysis                   |
| POSTAL_DISTRICT  | District where the property is located                                                                                     | Can be used to partition data            |
| TENURE           | Can be Freehold or Leasehold                                                                                               | Can be used to partition data            |

### Columns Dropped

| Column Name                 | Description                                                                                                                                                                  | Reason                                                                                                   |
|------------------|------------------------|-------------------------------|
| SALE_DATE                   | Date when the sale was made                                                                                                                                                  | We will aggregate **by quarter**, no need to know the specific dates.                                    |
| ADDRESS                     | Property Address                                                                                                                                                             | Will use `PROJECT_NAME` if needed to pinpoint projects                                                   |
| AREA_SQM                    | Price per sqm                                                                                                                                                                | `AREA_SFT` is adequate                                                                                   |
| UNIT_PRICE_PSM              | Price per sqm                                                                                                                                                                | `UNIT_PRICE_PSF` is adequate                                                                             |
| NETT_PRICE                  |                                                                                                                                                                              | Column is blank                                                                                          |
| COMPLETION_DATE             | When the property was completed. Some properties are Uncompleted as they will be turned over for the future                                                                  | Other attributes (e.g. `TYPE_OF_SALE`, `PROPERTY_TYPE`) are more important for checking submarket trends |
| PURCHASER_ADDRESS_INDICATOR | [Type of residence of the purchaser](https://www.ura.gov.sg/reis/dataDictionary#:~:text=Purchaser%20Address%20Indicator%3A%20It%20refers,is%20owned%20by%20the%20purchaser.) | No interest in buyer's current address                                                                   |
| POSTAL_CODE                 | Postal code of the property                                                                                                                                                  | Will use `POSTAL_DISTRICT` for location                                                                  |
| POSTAL_SECTOR               | Sector where the property is located                                                                                                                                         | Will use `POSTAL_DISTRICT` for location                                                                  |
| PLANNING_REGION             | Region where the property is located                                                                                                                                         | Will use `POSTAL_DISTRICT` for location                                                                  |
| PLANNING_AREA               | Area where the property is located                                                                                                                                           | Will use `POSTAL_DISTRICT` for location                                                                  |

### Filter code

We will now use `select()` to keep only the relevant columns. We will define the function below for filtering the relevant columns. This will also rearrange the columns based on the order in the function call.

```{r}
realis <-
  realis %>% select(
    c(
      TXN_ID,
      QUARTER,
      PROJECT_NAME,
      TRANSACTED_PRICE,
      AREA_SQFT,
      UNIT_PRICE_PSF,
      TYPE_OF_SALE,
      TYPE_OF_AREA,
      PROPERTY_TYPE,
      NUMBER_OF_UNITS,
      POSTAL_DISTRICT,
      TENURE
    )
  )
glimpse(realis)
```
:::

After this initial cleanup, we are left with **12** variables relevant to our exploration.

::: {.callout-tip collapse="true"}
### Save point

Let us save `realis` so we do not need to rerun the steps above.

```{r}
write_rds(realis, "data/rds/realis_cleaned.rds")
```
:::

::: {.callout-warning collapse="true"}
### Data clear point

We do not need the `realis_202*q*` dataframes anymore so we can remove them from the RStudio environment.

```{r}
#| eval: true
rm(realis_2023q1)
rm(realis_2023q2)
rm(realis_2023q3)
rm(realis_2023q4)
rm(realis_2024q1)
```
:::

## 3.4 Closer look at NUMBER_OF_UNITS

::: {.callout-note collapse="true"}
### Load point

We can continue running the document from this point by loading the following prepared data.

```{r}
realis <- read_rds("data/rds/realis_cleaned.rds")
```
:::

Taking a closer look at `NUMBER_OF_UNITS` columns reveals that **12 out of 26,806 transactions** involve multiple units.

```{r}
realis[order(-realis$NUMBER_OF_UNITS),] %>% filter(NUMBER_OF_UNITS > 1) %>% kable()
```

Furthermore, the `TRANSACTED_PRICE` for such transactions are **hundred million dollar transactions**, which can skew the data if we are looking at `TRANSACTED_PRICE` with the assumption that it is the **price per unit**.

For example **TXN01567**, is worth **\$392,180,000**, which is much higher that the price of individual units

## 3.5 Handling the bulk transactions

To address the 12 bulk transactions in our dataframe, we have 2 possible options:

-   **Option 1**: Remove these transactions as these correspond to **0.045%** of transactions ([**EASY**]{style="color:green"})

-   **Option 2**: Create rows for each unit in the transaction ([**HARD**]{style="color:red"})

Although Option 2 is more difficult, it is the better approach as all the transactions are **Resale** transactions. Simply removing them may remove very important data for the resale submarket.

For this solution, we need to do the following:

1.  Repeat all rows by `NUMBER_OF_UNITS` times.
2.  Set transacted price to the average price: ${TRANSACTED\_PRICE}\div{NUMBER\_OF\_UNITS}$.
3.  Set the area (sqft) to the average area: ${AREA\_SQFT}\div{NUMBER\_OF\_UNITS}$.
4.  Set `NUMBER_OF_UNITS` to 1.

::: panel-tabset
### Repeating rows

Reference: [Stackoverflow](https://stackoverflow.com/questions/11121385/repeat-rows-of-a-data-frame)

::: {.callout-note appearance="simple"}
#### Functions used

`rep()` - to repeat a dataframe

`seq_len(nrow())` - to iterate to each row of the dataframe
:::

```{r}
sales_txns <- realis[rep(seq_len(nrow(realis)), realis$NUMBER_OF_UNITS),]
```

Lets' check if the number of rows correspond to the total number of units sold.

```{r}
nrow(sales_txns) == sum(realis$NUMBER_OF_UNITS)
```

### Setting column values

We will perform the changes to `NUMBER_OF_UNITS`, `TRANSACTED_PRICE`, `AREA_SQFT` in 1 code chunk so that rerunning the code chunk is idempotent and won't mutate the variable further

```{r}
sales_txns <- sales_txns %>%
  filter(NUMBER_OF_UNITS > 1) %>%
  mutate(TRANSACTED_PRICE = round(TRANSACTED_PRICE / NUMBER_OF_UNITS, 0)) %>%
  mutate(AREA_SQFT = round(AREA_SQFT / NUMBER_OF_UNITS, 0)) %>%
  mutate(NUMBER_OF_UNITS = 1) %>%
  rbind(sales_txns %>% # Reconnect to the rest of the dataframe
              filter(NUMBER_OF_UNITS == 1))
```
:::

Let us verify the result of the transformation.

::: panel-tabset
### Before

```{r}
realis %>%
  filter(TXN_ID %in% c(
    "TXN00001", "TXN00002", # Single-unit transactions
    "TXN10593", "TXN13376" # Bulk transactions
    )) %>% kable()
```

### After

```{r}
sales_txns %>%
  filter(TXN_ID %in% c(
    "TXN00001", "TXN00002", # Single-unit transactions
    "TXN10593", "TXN13376" # Bulk transactions
    )) %>% kable()
```
:::

::: {.callout-tip collapse="true"}
### Save point

Let us save `sales_txns` so we do not need to rerun the steps above.

```{r}
write_rds(sales_txns, "data/rds/sales_txns.rds")
```
:::

::: {.callout-warning collapse="true"}
### Data clear point

We will use `sales_txns` from now on so we can remove `realis` from the environment.

```{r}
#| eval: true
rm(realis)
```
:::

# 4 Data Exploration

::: {.callout-note collapse="true"}
## Load point

We can continue running the document from this point by loading the following prepared data.

```{r}
sales_txns <- read_rds("data/rds/sales_txns.rds")
```
:::

## 4.1 Defining the audience and purpose of the visualizations

### 4.1.1 Considerations

It is important to note that it is quite challenging to **present all data available with just 3 visualizations**. We cannot cover all ground and visualize the data from all perspectives, and some blind spots and biases are bound occur in the process.

With this in mind, it is important that we define the **audience and purpose** of the visualizations.

The audience is a **prospective private property buyer** that needs help answering these questions in making decisions on buying property:

1.  Should I buy a new property or a resale property?
2.  Should I buy a condo, apartment, or is it worth it to save more for a landed property?
3.  Which districts should I consider when buying a property?
4.  Do I get a bargain compared to buying a property last year?

To answer the questions above, we will focus on exploring and visualizing the **distribution among the different markets** (New Sale, Resale, Sub Sale).

The points of interest are:

-   Prices (unit and total)

-   Distribution across different markets

-   Distribution by property type

::: {.callout-important appearance="simple"}
#### Risks when selecting data to present

As we have limited space to present data (within 2-3 visualizations), we cannot include all the data available to us.

With this, some perspectives may be missed and we will not be able to dive deep enough all aspects of the data.
:::

### 4.1.2 Unit Price vs Transacted Price

Given `AREA_SQFT` and `UNIT_PRICE_PSF`, it is intuitive to expect that: $$AREA\_SQFT \times UNIT\_PRICE\_PSF = TRANSACTED\_PRICE$$

However, there are only **7 out of 26,936** transactions for which this is true.

```{r}
sales_txns %>% filter(TRANSACTED_PRICE == AREA_SQFT * UNIT_PRICE_PSF) %>% nrow()
```

This is because the final transacted price depends on other factors like size of property, floor height, where the property is facing, etc. Most of these **factors are not reflected** in the dataset we have.

Hence, to have a fairer comparison with what we have, we will use **UNIT_PRICE_PSF** for price comparisons.

### 4.1.3 Compare all quarters or two quarters

In answering the questions we define (and based on the specifications of the exercise), the data partition for the visualization is by `TYPE_OF_SALE` as we want to look for trends from the different submarkets.

We current have **5 quarters** in our dataset, **3** submarkets. This means **15 facets**, which may be too much for division for visualization. It is also difficult to see at a glance when information we are trying to communicate if there are many very small graphs.

In addition, if we want to dive even deeper by `PROPERTY_TYPE`, which has 6 possible values, that is **90 data subsets** we need to present.

Hence to simplify the visualization, we will choose only the `2023Q1` and `2024Q1`, which should suffice for our purpose of comparing the state of the market to last year's as we are comparing the same time of the year.

Hence, we will produce the data frames to contain these data.

```{r}
sales_txns_q1_2324 <- sales_txns %>% filter(QUARTER %in% c("2023Q1", "2024Q1"))
sales_txns_q1_23 <- sales_txns_q1_2324 %>% filter(QUARTER == "2023Q1")
sales_txns_q1_24 <- sales_txns_q1_2324 %>% filter(QUARTER == "2024Q1")
```

## 4.2 Visualization 1: 2023Q1 and 2024Q1 prices

First we will compare the prices between the **First Quarter** of 2023 and 2024. This is to compare the prices at the same time of the year.

For this visualization, we will use the **Unit Price per Sqft** (`UNIT_PRICE_PSF`) instead of the **Transaction Price** (`TRANSACTED_PRICE`). This is so we can more fairly compare prices with less variables involved. With Transaction Price, the size of the property needs to be considered.

We will use the `TYPE_OF_SALE` column to partition the data so we can compare the trends across the **Resale, New Sale and Sub Sale markets**.

### 4.2.1 Creating the base Visualization

For the visualization, we will use a **Raincloud Plot** so that we can see the patterns in the price trends, and whether there are clusters of interest within the data set.

We will also add a **boxplot** to accompany the half-density plot so that we can see the quantiles more clearly.

To compare the different quarters, we will use both **left side and right side** visualization to compare the quarters side by side. This is inspired by a [senior's work.](https://akalestale.netlify.app/take-home_ex/take-home_ex01/take-home_ex01)

To visualize the volumes, the 2 options are using `stat_dots()` or `geom_jitter()`.

::: panel-tabset
#### Raincloud Plot w/ volume plot (chosen)

```{r}
#| code-fold: true
#| code-summary: "Show ggplot2 code"
plot_q1_yoy_psf_price <- function() {
  ggplot(
    sales_txns_q1_2324,
    aes(
      x = QUARTER,
      y = UNIT_PRICE_PSF,
      fill = QUARTER,
      color = QUARTER
    )
  ) +
    
    # Generate half-density plot
    stat_halfeye(
      aes(
        justification = ifelse(QUARTER == "2023Q1", 1.20, 0.02),
        side = ifelse(QUARTER == "2023Q1", "left", "right")
      ),
      position = position_nudge(x = 0.1, y = 0),
      .width = 0,
      alpha = 0.8,
      point_color = NA,
      show.legend = FALSE
    ) +
    
    # Generate boxplot along edge of half-density plot
    geom_boxplot(
      outlier.shape = NA,
      alpha = 0.8,
      width = .1,
      color = "black",
      show.legend = FALSE
    ) +
    
    # Generate volume plots, adjusting sizing so as to not overflow into the other half
    stat_dots(
      aes(
        side = ifelse(QUARTER == "2024Q1", "left", "right"),
        justification = ifelse(QUARTER == "2024Q1", 1.10,-0.1)
      ),
      binwidth = 100,
      dotsize = 0.005,
      alpha = 0.2,
      show.legend = FALSE
    ) +
    
    # Add text about the median price
    stat_summary(
      aes(label = paste0("S$", after_stat(y))),
      geom = "text",
      fun = "median",
      position = position_nudge(y = 2500),
      family = "Roboto Condensed",
      size = 3,
      show.legend = FALSE
    ) +
    
    # Set colors and fill
    # Keep it simple, and use bright color for 20424Q1 it is the focus of visualization
    scale_color_manual(values = c("grey45", "blue")) +
    scale_fill_manual(values = c("grey45", "blue")) +
    labs(y = "Unit Price Per Sqft ($)") +
    # Next steps will take care of theme enhancements
    theme_minimal()
}

plot_q1_yoy_psf_price()
```

#### Raincloud Plot w/ jitter plot (alternative)

```{r}
#| code-fold: true
#| code-summary: "Show ggplot2 code"
plot_q1_yoy_psf_price_alt <- function() {
  ggplot(
    sales_txns_q1_2324,
    aes(
      x = QUARTER,
      y = UNIT_PRICE_PSF,
      fill = QUARTER,
      color = QUARTER
    )
  ) +
    
    # Generate half-density plot
    stat_halfeye(
      aes(
        fill = QUARTER,
        justification = ifelse(QUARTER == "2023Q1", 1.22, 0),
        side = ifelse(QUARTER == "2023Q1", "left", "right")
      ),
      position = position_nudge(x = 0.1, y = 0),
      .width = 0,
      alpha = 0.8,
      point_color = NA,
      show.legend = FALSE
    ) +
    
    # Generate jitter plot under the geom plot so the dots don't overpower the boxplot
    geom_jitter(
      width = 0.08,
      size = 0.01,
      alpha = 0.2,
      show.legend = FALSE
    ) +
    
    # Generate boxplot along edge of half-density plot
    geom_boxplot(
      outlier.shape = NA,
      alpha = 0,
      width = 0.1,
      color = "black",
      show.legend = FALSE
    ) +
    
    # Add text about the median price
    stat_summary(
      aes(label = paste0("S$", after_stat(y))),
      geom = "text",
      fun = "median",
      position = position_nudge(y = 2500),
      family = "Roboto Condensed",
      size = 3,
      show.legend = FALSE
    )+
    
    # Set colors and fill
    # Keep it simple, and use bright color for 20424Q1 it is the focus of visualization
    scale_fill_manual(values = c("grey50", "blue")) +
    scale_color_manual(values = c("grey50", "blue")) +
    labs(y = "Unit Price Per Sqft ($)") +
    # Next steps will take care of theme enhancements
    theme_minimal()
}

plot_q1_yoy_psf_price_alt()
```
:::

::: callout-note
#### Decision: stat_dots()

Using `stat_dots()` is better than `geom_jitter()` as the purpose of providing volume information here is to **accompany the half-density plot** and provide a tool to compare the volume of each submarket.

Comparing the length of each horizontal line is much easier to do than comparing how dark each area is in a jitter plot.
:::

Now that we have the base visualization, we will generate the final visualization.

### 4.2.2 Adding the % change

When generating the facet name, we also can add the % change so that it is clear for the audience how much the prices change.

We will use the following function to render the % change, which will show as <span style='color:darkgreen'>**+x.x%**</span> when there is an increase, and <span style='color:brown'>**-x.x%**</span> when there is a decrease.

```{r}
show_price_pc_change <- function(market = "1") {
  data2023 = sales_txns_q1_23
  data2024 = sales_txns_q1_24
  
  # 1 is the facet name for All markets
  if (market != "1") {
    data2023 = data2023 %>% filter(TYPE_OF_SALE == market)
    data2024 = data2024 %>% filter(TYPE_OF_SALE == market)
  } else {
    market = "All Markets"
  }
  
  median2023 = data2023$UNIT_PRICE_PSF %>% median()
  median2024 = data2024$UNIT_PRICE_PSF %>% median()
  
  sprintf(
    "%s (<span style='color:%s;'>**%s%0.1f%%**</span>)",
    market,
    ifelse(median2024 < median2023, "brown", "darkgreen"),
    ifelse(median2024 < median2023, "-", "+"),
    (median2024 - median2023) * 100 / median2023
  )
}
```

### 4.2.3 Generating the visualization

We want to compare the 2023 and 2024 Q1 sales for different submarkets. To do this, we will use `facet_wrap()` on `TYPE_OF_SALE`.

In addition, we will add another facet for **All Markets** for the overall comparison.

These 2 plots will be shown side by side using `patchwork`.

::: {.callout-note collapse="true" appearance="simple"}
#### facet_grid(margin = TRUE) as alternative

We can also use `facet_grid(margin = TRUE)` to generate a facet with all the data, instead of generating 2 separate plots.

However, I would like to change the panel color for the overall plot to highlight it but I couldn't find a way to do it within `facet_grid()`.
:::

```{r}
#| code-fold: true
#| code-summary: "Show ggplot2 code"
q1_yoy_psf_price_submarkets_graph <- plot_q1_yoy_psf_price() +
  facet_wrap( ~ TYPE_OF_SALE,
              strip.position = "bottom",
              labeller = labeller(
                TYPE_OF_SALE = c(
                  "New Sale" = show_price_pc_change("New Sale"),
                  "Sub Sale" = show_price_pc_change("Sub Sale"),
                  "Resale" = show_price_pc_change("Resale")
                )
              )) +
  theme_minimal() +
  theme(axis.title.y = element_blank(),
        axis.text.y = element_blank())

q1_yoy_psf_price_all_markets_graph <- plot_q1_yoy_psf_price() +
  facet_wrap(
    ~ NUMBER_OF_UNITS,
    strip.position = "bottom",
    labeller = as_labeller(show_price_pc_change)
  ) +
  labs(x = "Transaction Price (,000 SGD)") +
  theme(panel.background = element_rect(fill = "aliceblue", linewidth =
                                          0))

# As much as we want the plot annotations to be dynamic, the subtitle is depending on the actual data
# Only this part is hardcoded
viz1 <- (q1_yoy_psf_price_all_markets_graph |
           q1_yoy_psf_price_submarkets_graph) +
  plot_layout(widths = c(1, 3)) +
  plot_annotation(title = "Singapore Private Property Prices by Sales Market",
                  subtitle = "Overall prices slightly increased by <span style='color:darkgreen;'>**1.2%**</span> but the New Sales market experienced <span style='color:brown;'>**7.6%**</span> decrease.") &
  theme(
    text = element_text(family = "Roboto Condensed"),
    axis.line.x = element_line(),
    axis.title.x = element_blank(),
    axis.ticks.y = element_blank(),
    plot.title = element_text(face = "bold"),
    plot.subtitle = element_markdown(color = "grey50", size = rel(0.9)),
    strip.placement = "outside",
    strip.text = element_markdown(size = rel(1))
  )
viz1
```

::: callout-tip
#### Insights

Although there is an overall slight increase in market unit prices compared to Q1 2023, the **New Sale** market experienced a decrease, with notable groups in the graph. This indicates cluster of sales in certain price points, which may be influenced by factors such as **developer pricing** and **location of New Launches.**

The New Sales Market is composed of **New Launch** properties. Groups are expected to appear in the density map as new projects are expected in new estates, while less projects are expected in mature estates. According to [99.co](https://www.99.co/singapore/new-launches), there are **less than 10 New Launches** in 2024. Prices are set by the developers so there is **less variation in unit price within each project**. Hence, it is expected to see groups around these New Launches. This effect is also observed to a smaller extent in the Sub Sale Market.

In the Resale Market, the available market is **all properties that have already been turned over by developers**. Price is set based on agreement between the buyer and seller, and is not limited to certain projects. Hence, there is more variation in the prices, which is why the distribution appears smoother.
:::

However, it is important to note that visualization can be very **misleading** especially on the New Sale Market. Generalizing that the trends when there are notable cluster may not be representative of the real state of the market.

Hence, we need to look more deeply into these groups and present it as a visualizations so it can be better understood why there are groups that formed.

## 4.3 Visualization 2: 2023Q1 and 2024Q1 Sales Volume

### 4.3.1 Understanding the groups in New Sales Market

We hypothesized that the groups that are present in the **New Sales** plot is due to the sales of **newly-launched projects**.

We will check the aggregated data by `PROJECT_NAME` and `POSTAL_DISTRICT` to verify our hypothesis that the sales are clustered by newly launched projects and their respective districts

::: panel-tabset
#### By Project Name

We will aggregate the **number of sales** and **median unit price** by projects. We will also add `POSTAL_DISTRICT` to the aggregation group as property prices depend on which district a property is in.

```{r}
sales_txns_q1_24 %>% filter(TYPE_OF_SALE == "New Sale") %>% 
  group_by(POSTAL_DISTRICT, PROJECT_NAME) %>%
  summarize(
    MEDIAN_PRICE_PSF = median(UNIT_PRICE_PSF),
    NUMBER_OF_SALES = n()
  ) %>%
  arrange(desc(NUMBER_OF_SALES)) %>%
  head(10) %>% kable(row.name = TRUE)
```

We can see that **8 out of 10** projects with highest number of sales are in **Districts 23 and 26.** This is consistent with our previous observation that there are 2 groups in the New Sales density graph.

Furthermore, in [99.co's New Launches page](https://www.99.co/singapore/new-launches), [Lentor Mansion](https://www.99.co/singapore/condos-apartments/lentor-mansion) (D26) and [Lumina Grand](https://www.99.co/singapore/condos-apartments/lumina-grand) (D23) are the biggest projects with the highest number of units sold.

Hence, the density graph could reflected the groups that formed from the sales of properties within these 2 projects.

#### By District

```{r}
sales_txns_q1_24 %>% filter(TYPE_OF_SALE == "New Sale") %>% 
  group_by(POSTAL_DISTRICT) %>%
  summarize(
    MEDIAN_PRICE_PSF = median(UNIT_PRICE_PSF),
    NUMBER_OF_SALES = n()
  ) %>%
  arrange(desc(NUMBER_OF_SALES)) %>%
  kable(row.names = TRUE)
```

Although there are new units across all districts, the big, newly launched projects contributed the most to the New Sales Market.

This is hinted by the fact that after aggregating all property sales by district, D23 and D26 where [Lumina Grand](https://www.99.co/singapore/condos-apartments/lumina-grand) and [Lentor Mansion](https://www.99.co/singapore/condos-apartments/lentor-mansion) stand out. More than 60% of sales from each of these district also come from these 2 projects.
:::

Based on the findings from this deep dive, we will visualize the sales volume by district.

### 4.3.2. Creating the base visualization

Some of the options we have to visualize the sales by district are:

-   Bar graph of number of sales for **all** districts, or

-   Bar graph of number of sales for **most popular** districts

::: panel-tabset
#### All districts

```{r}
plot_q1_yoy_sale_vol <- function() {
ggplot(
  sales_txns_q1_2324,
  aes(x = POSTAL_DISTRICT, fill = QUARTER)
) +
  geom_bar(position="dodge", show.legend = FALSE) +
  coord_flip() +
  scale_fill_manual(values = c("grey45", "blue")) +
  theme_minimal()
}

plot_q1_yoy_sale_vol()
```

#### Most popular districts (chosen)

This visualization needs some pre-processing so we can determine the Top 5 most popular districts in each submarket.

```{r}
popular_districts <- sales_txns_q1_2324 %>% 
  group_by(QUARTER, POSTAL_DISTRICT, TYPE_OF_SALE) %>%
  summarize(
    MEDIAN_PRICE_PSF = median(UNIT_PRICE_PSF),
    NUMBER_OF_SALES = n()
  ) %>%
  group_by(QUARTER, TYPE_OF_SALE) %>%
  arrange(desc(NUMBER_OF_SALES)) %>%
  mutate(RANK = order(NUMBER_OF_SALES, decreasing=TRUE)) %>%
  filter(RANK <= 5) %>%
  select(c(QUARTER, TYPE_OF_SALE, RANK, POSTAL_DISTRICT, NUMBER_OF_SALES, MEDIAN_PRICE_PSF)) %>%
  arrange(QUARTER)

kable(popular_districts, row.names = TRUE)
```

Now that we have this aggregated dataset, we can use this to plot the ranked data. For example, we can plot the most popular districts in the New Sales Market.

```{r}
ggplot(popular_districts %>% filter(TYPE_OF_SALE =="New Sale"),
       aes(x = reorder(RANK, -RANK), y = NUMBER_OF_SALES, fill = QUARTER))+
  geom_bar(stat="identity", position = "dodge", show.legend = FALSE, alpha =0.8) +
  geom_text(aes(y = 10, hjust=0, label=paste0("D", POSTAL_DISTRICT, ": ", NUMBER_OF_SALES))) +
  coord_flip(ylim= c(0, 600)) +
  scale_fill_manual(values = c("grey45", "blue")) +
  facet_wrap(~QUARTER)
```

With this visualization, we can compare the top districts from 2 quarters side by side.
:::

From the 2 options, plotting the **Most Popular Districts** is more appropriate for our use case. This is because we would like the user to recognize which districts are driving the price trends.

When we plot all the districts, it is more difficult to identify by sight which districts are popular in a quarter and the other. This is because this plot has a lot of noise, which may not be that relevant to connect to the previous visualization.

### 4.3.3 Generating the visualization

We will generate the visualization such that `QUARTER` is in column and `TYPE_OF_SALE` is in rows.

We will using `facet_grid()` to generate the visualization and adjust the theme elements as needed to make the plot more presentable.

```{r}
#| code-fold: true
#| code-summary: "Show ggplot2 code"
viz2 <- ggplot(popular_districts,
       aes(
         # Order the axis elements by rank
         x = reorder(RANK,-RANK),
         y = NUMBER_OF_SALES,
         fill = QUARTER
       )) +
  
  # Generate bar graph based on number of sales
  geom_bar(
    stat = "identity",
    position = "dodge",
    show.legend = FALSE,
    alpha = 0.8
  ) +
  
  # Add descriptive label
  geom_text(aes(
    y = 10,
    hjust = 0,
    label = sprintf(
      "D%s: %d units sold at S$%0.2f psf",
      POSTAL_DISTRICT,
      NUMBER_OF_SALES,
      MEDIAN_PRICE_PSF
    )
  ), family = "Roboto Condensed") +
  
  # Generate horizontal bar
  coord_flip(ylim = c(0, 600)) +
  
  # Set colors consistent with previous visualization
  scale_fill_manual(values = c("grey45", "blue")) +
  
  # Generate facets, with labels to the left and at the bottom
  facet_grid(TYPE_OF_SALE ~ QUARTER, switch = "both") +
  
  # Set plot texts
  plot_annotation(title = "Districts With Highest Units Sold for Each Submarket",
                  subtitle = "New Sale Market is heavily influenced by the newly-launched projects in **D23** (Lumina Grand) and **D26** (Lentor Mansion).",
                  caption = "Prices shown are **median unit price** per sqft") &
  # Set theme
  theme_minimal() +
  theme(
    text = element_text(family = "Roboto Condensed"),
    axis.line.x = element_line(),
    axis.title.x = element_blank(),
    axis.title.y = element_blank(),
    axis.text.y = element_blank(),
    plot.title = element_text(face = "bold"),
    # Use element_markdown so we can style the text
    plot.subtitle = element_markdown(color = "grey50", size = rel(0.9)),
    plot.caption = element_markdown(color = "grey50"),
    strip.placement = "outside",
    strip.text = element_text(size = rel(1))
  )
viz2
```

::: {.callout-note collapse="true" appearance="simple"}
#### About the texts in the visualization

Texts such as *xx units sold at \$xxxx.xx* were added in the plot so the information is easily digestible.

However, it made the plot messy, and not aesthetically pleasing. Ideally, the full text should be rendered when interacting with the graph. I do not know how to do that right now, but it will be how I will present this visualization in the future.

Given this limit in my present abilities, I prioritized **clarity of information** over aesthetic considerations.
:::

::: callout-tip
#### Insights

Plotting the most popular districts for each submarket reveals that the Top 5 districts in the **New Sale** market, differs for the 2 quarters.

In 2023Q1, the distribution is more balanced and there were a lot of units sold in expensive districts like **Districts 9** and **10**. However, In 2024Q1, the number of units sold were skewed towards cheaper districts like **Districts 23** and **26** where big projects like [Lumina Grand](https://www.99.co/singapore/condos-apartments/lumina-grand) and [Lentor Mansion](https://www.99.co/singapore/condos-apartments/lentor-mansion), respectively, were launched.

This is why the overall prices in the New Sale market appear to be much cheaper than the previous year, when in fact the new projects that launched are in **cheaper districts**.

On the contrary, the top districts in the Resale and Sub Sale markets have much less difference. This smaller change also resulted in a smaller impact on the overall median price in these markets.
:::

## 4.4 Visualization 3: 2024 Q1 Market by Property Type

### 4.3.1 Checking price trends by property type

Previous visualizations focused on comparisons between the Q1 of 2023 and 2024, and based on the different markets.

For the next visualization, we will first explore the data with **2024Q1**, based on the property type.

Let us group the data by **TYPE_OF_SALE** and **PROPERTY_TYPE** if we can gain new insights based on the size of property. We will get the aggregated median values for price and area columns.

```{r}
sales_txns_q1_24 %>%
  group_by(TYPE_OF_SALE, PROPERTY_TYPE) %>%
  summarize(
    UNIT_PRICE_PSF = median(UNIT_PRICE_PSF),
    TRANSACTED_PRICE = median(TRANSACTED_PRICE),
    AREA_SQFT = median(AREA_SQFT),
    UNITS_SOLD = n()
  ) %>% arrange(desc(UNITS_SOLD), .by_group = TRUE) %>%
  kable
```

From this aggregated data, we can see that **Executive Condominiums** are relatively cheaper than **Condominiums** and **Apartments**, which are of similar area. From my research, Executive Condominiums are under [HDB](https://www.hdb.gov.sg/residential/buying-a-flat/executive-condominium), but are built and sold by property developers. This is why it is much cheaper.

We can also notice that there are much lower sales for some property types, like **Terrace House**, **Semi-Detached House**, and **Detached House.** These are landed properties, which are quite rare in Singapore so it is logical to see much fewer sales of these properties.

### 4.3.2 Creating base visualizations

From the insights gained from our initial exploration, we observed that prices differ by property types and that there are less sales on some property prices.

::: panel-tabset
#### Unit Price

For the unit price, we will use **boxplot** instead of density plots as we can see the distribution for different markets. If we use density plots, it is harder to present partitioned data in an easy to understand way.

Lastly, we will generate some reference lines for statistics (mean and median).

```{r}
#| code-fold: true
#| code-summary: "Show ggplot2 code"
# Calculate stats for reference lines
median_q1 <- median(sales_txns_q1_24$UNIT_PRICE_PSF)
mean_q1 <- mean(sales_txns_q1_24$UNIT_PRICE_PSF)

unit_price_by_prop_type <- ggplot(sales_txns_q1_24,
                                  aes(x = PROPERTY_TYPE, y = UNIT_PRICE_PSF, fill = TYPE_OF_SALE)) +
  
  # Generate different boxplots for each market and property type
  geom_boxplot(outliers = FALSE,
               width = 0.4,
               alpha = 0.8) +
  
  # Render median reference line
  geom_hline(aes(yintercept = median_q1, color = "Median"),
             linetype = "dashed",
             alpha = 0.8) +
  annotate(
    geom = "text",
    x = 6.6,
    y = ifelse(median_q1 < mean_q1, median_q1 - 200, median_q1 + 250),
    label = paste0("Median =\n$", median_q1),
    family = "Roboto Condensed",
    color = "brown",
    size = 3,
    alpha = 0.8
  ) +
  
  # Render mean reference line
  geom_hline(aes(yintercept = mean_q1, color = "Mean"),
             linetype = "dashed",
             alpha = 0.8) +
  annotate(
    geom = "text",
    x = 6.6,
    y = ifelse(mean_q1 < median_q1, mean_q1 - 200, mean_q1 + 250),
    label = paste0("Mean =\n$", round(mean_q1, 0)),
    family = "Roboto Condensed",
    color = "darkgreen",
    size = 3,
    alpha = 0.8
  ) +
  
  # Set labels
  labs(x = "Property Type",
       y = "Unit Price Per Sqft ($)",
       fill = "Market",
       color = "Statistics") +
  
  # Wrap long labels using `wrap_format()` from `scale` package
  # Add some space to the right for Statistics annotations
  scale_x_discrete(labels = wrap_format(10), expand = expansion(add = c(0.6, 1))) +
  
  # Set colors
  scale_fill_manual(values = c("darkorange", "blue", "gold3")) +
  scale_color_manual(values = c("darkgreen", "brown")) +
  theme_minimal() +
  theme(
    # Remove axis text. Combining this with the price visualization will stack the 2 graphs
    axis.text.x = element_blank()
  )

unit_price_by_prop_type
```

We can see from the graph that some box plots are very short, which is especially true for **Landed** properties as there are few units sold for these property types.

#### Volume

As companion to the unit price graph, we will also generate a simple bar graph for the volume.

```{r}
#| code-fold: true
#| code-summary: "Show ggplot2 code"
sales_volume_by_prop_type <-
  ggplot(
    sales_txns_q1_24,
    aes(x = PROPERTY_TYPE, fill = TYPE_OF_SALE)
  ) +
  
  # Generate stacked bar graph by TYPE_OF_SALE
  # Do not show label as the price graph will show it
  geom_bar(alpha = 0.8, width = 0.5, show.legend = FALSE) +
  
  # Generate labels for stacked bar areas
  # Do not show label as the price graph will show it
  # Use ggrepel as some areas in the bar graph are too small to render th text inside
  geom_label_repel(
    aes(label = after_stat(count)),
    stat = "count",
    position = "stack",
    family = "Roboto Condensed",
    size = 2.5,
    alpha = 0.8,
    color = "white",
    show.legend = FALSE
  ) +
  
  # Apply colors
  scale_fill_manual(values = c("darkorange", "blue", "gold3")) +
  labs(y = "Units Sold") +
  
  # Wrap long titles
  # Apply same "expand" so axes align
  scale_x_discrete(labels = wrap_format(10), expand = expansion(add = c(0.6, 1))) +
  
  # Appply theme
  theme_minimal() +
  theme()

sales_volume_by_prop_type
```

The volume graph provides additional information about sales by property type. Some property types with lower sales volume may show a longer boxplot, which may be interpreted as more units sold.

With this companion graph, it is easier to cross-reference the price with the volume to better judge how representative of the market the unit prices are.
:::

### 4.3.3 Generating the visualization

Finally, we will generate the visualization by stacking the 2 graphs and doing final touches on the styling and texts.

```{r}
#| code-fold: true
#| code-summary: "Show ggplot2 code"
viz3 <- (unit_price_by_prop_type / sales_volume_by_prop_type ) +
  plot_layout(heights = c(5,1)) +
  plot_annotation(title = "Singapore Private Property Sales by Property Type for 2024 Q1",
                  subtitle = "**Executive Condiminiums** sold at the lowest unit prices, while **Apartments** and **Condominiums** sold at the highest unit prices.") &
  theme(
    text = element_text(family = "Roboto Condensed"),
    axis.title.x = element_blank(),
    legend.position = "top",
    legend.justification = "left",
    legend.location = "plot",
    plot.title = element_text(face = "bold"),
    plot.subtitle = element_markdown(color = "grey50", size = rel(0.9)),
  )
viz3
```

::: callout-tip
#### Insights

From our initial exploration, we have already established that **Executive Condominiums are cheapest** in terms of unit price.

Another surprising observation is that despite having more sales of Executive Condominiums, its boxplot is much shorter than those of **Detached House** and **Semi-Detached House**. This observation applies in both New Sale and Resale Market.

A possible explanation for this is that HDB **regulates the price** of Executive Condominiums so there is much less variation of price compared to other property types.

It can also be observed that there are much fewer sales in the **New Sales** market of landed properties. It could be due to the fact that compared to Strata developments, Landed properties are usually bespoke to their owner's use. In addition to the fact that landed properties are rare in Singapore, is it expected to see less New Sales in this category.
:::

# 5 Summary

## 5.1 Visualizations

For this exercise, we generated 3 visualizations, show below.

### 5.1.1 Singapore Private Property Prices by Sales Market

```{r}
#| echo: false
viz1
```

### 5.1.2 Districts with Highest Units Sold for Each Submarket

```{r}
#| echo: false
viz2
```

### 5.1.3 Singapore Private Property Sales by Property Type for 2024 Q1

```{r}
#| echo: false
viz3
```

## 5.2 Overall Insights

We found that the 2024 New Sales market experienced an sizable decrease is overall prices (7.6%) compared to the same period last year. However, it should be noted that this is due to **New Launches located in cheaper districts**, compared to the same period last year where that launches where in central districts like **9 and 10**.

Another very interesting insight is that different property prices experience big variations in prices, while **Executive Condominiums** have smaller variations. This is because of the more controlled and regulated environment as these properties are under the jurisdiction of HDB. This is why although median prices are at S\$1736 in 2024Q1, it is possible to find a more affordable property when looking at Executive Condominiums.

Hence, a prospective buyer must take generalizations in the housing market with the grain of salt as overall market trends may not reflect the situation in the market they are interested in. This is why when thinking of buying a property, it is important to be more **specific on the kind of property you are looking for** (e.g. which district, property type, new or resale, etc) and narrow down on the trends for each of those. They must do their own due diligence in researching the market they are interested in to make a sound decision on their purchase.

## 5.2 Reflections

When choosing how to visualize the data, I had to make hard decisions on what data subsets to select. At first I was wary that I will be presenting misleading data. My own bias and limitations also reflect the output as I had to limit myself to looking at 2 quarters as I cannot imagine how to present data from all 5 quarters effectively with the level of detail in the different submarkets and property type.

However, I realized that with the details available to us, it is impossible to cover everything. It is more important to tailor the visualization to our target audience, and even then we may not be able to provide everything they need.

I am now more aware that as a data visualization consumer, I must do my on due diligence to dive deep into the details as the visualizations may be too general or too detailed for our own needs. Some data may be omitted or data due to various limitations.

As a student, there were also some frustrating moments as I wanted to present data in a certain way but my current abilities limit me from presenting data in such a way (especially on Visualization 2). As I progress in this course, I will challenge myself to implement those ideas as I expand my own learning.

# 6 References

99.co. (2024). New Launch Condos & Projects in Singapore. *99.co*. <https://www.99.co/singapore/new-launches>

Holtz, Yan. (2024). Dealing with colors in ggplot2. *The R Graph Gallery*. <https://r-graph-gallery.com/ggplot2-color.html>

Housing & Development Board. (2024). Executive Condominium. *Housing & Development Board.* <https://www.hdb.gov.sg/residential/buying-a-flat/executive-condominium>

Kam, Tin Seong. (2023). Visualising Distribution. *R for Visual Analytics.* <https://r4va.netlify.app/chap09>

Lim, Abram. (2024). 13+ Housing & Household Statistics in Singapore (2024).*SmartWealth Singapore*. <https://smartwealth.sg/housing-household-statistics-singapore/>

PropertyGuru Editorial Team. (2024). Singapore Property Market Outlook 2024 Overview. *PropertyGuru.* [https://www.propertyguru.com.sg/property-guides/singapore-property-market-outlook-2024-90041](https://www.propertyguru.com.sg/property-guides/singapore-property-market-outlook-2024-90041#1){.uri}

Tan, Kylie. (2023). Take-home Exercise 1: Investigating Student Performance with Data Visualisations. *Kale's Visual Analytics Tales.* <https://akalestale.netlify.app/>

Trading Economics. (2024). *Home Ownership Rate \| G20*. <https://tradingeconomics.com/country-list/home-ownership-rate?continent=g20>
