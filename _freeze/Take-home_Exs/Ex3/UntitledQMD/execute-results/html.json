{
  "hash": "b01fa099131129ea30f5418faf72fbad",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take Home Ex3: VAST Challenge 2024 Mini-Challenge 3 [WIP]\"\nauthor: \"Kristine Joy Paas\"\ndate: \"22 May 2024\"\ndate-modified: \"last-modified\"\nformat: html\nexecute: \n  echo: true\n  eval: false\n  warning: false\n  freeze: true\n---\n\n\n# 1 Overview\n\n# 2 Setup\n\n## 2.1 Loading Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(\n  jsonlite,\n  tidyverse,\n  ggraph,\n  #tidygraph,\n  visNetwork,\n  patchwork,\n  ggtext,\n  knitr,\n  igraph,\n  ggiraph\n)\n```\n:::\n\n\nWe will also set some values to have consistency throughout all graphs. This is also so that we don't have to search and replace all instances of these\n\n\n::: {.cell}\n\n```{.r .cell-code}\nFONT_FAMILY = \"Roboto Condensed\"\n```\n:::\n\n\n## 2.2 Loading Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_data <- fromJSON(\"data/mc3.json\")\nglimpse(mc3_data)\n```\n:::\n\n\nIt contains graph data, where nodes can be accessed via `nodes` and edges via `links`. This dataset has a lot of columns but we will only filter the relevant data during wrangling..\n\n# 3 Data Wrangling\n\n## 3.1 Extracting Graph Elements\n\nFor simplicity, we will only extract the columns that are needed to do graph analysis. We will also *ignore* the time elements for now so we will not be including them in the analysis.\n\n::: panel-tabset\n### Nodes\n\nThe nodes represent the entities in the network. They can be people or companies.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_nodes_raw <- as_tibble(mc3_data$nodes)\nglimpse(mc3_nodes_raw)\n```\n:::\n\n\nWe will only retain the following columns:\n\n-   `id` - to serve as the identifier for the node\n\n-   `type` - to differentiate people from companies in the graph.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_nodes_lite <- mc3_nodes_raw %>% select(id, type)\n```\n:::\n\n\n### Edges\n\nThe edges represent the relationship between different nodes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_edges_raw <- as_tibble(mc3_data$links)\nglimpse(mc3_edges_raw)\n```\n:::\n\n\nWe will only retain the following columns:\n\n-   `source` - to identify the *actor* of the relationship, corresponds to `id` in nodes.\n\n-   `target` - to identify the *receiver* of the relationship, corresponds to `id` in nodes.\n\n-   `type` - to identify the type of the relationship\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_edges_lite <- mc3_edges_raw %>% select(source, target, type)\n```\n:::\n\n:::\n\n## 3.2 Closer look at *type*\n\nBoth the `nodes` and `edges` have `type` which contains the type of the nodes and edges. We will assign a `supertype` and a `subtype` from `type`.\n\n::: panel-tabset\n### Nodes\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(mc3_nodes_lite$type) %>% unique()\n```\n:::\n\n\n`supertype` - type of entity, either *Person* or *Organization*\n\n`subtype` - subcategory of *supertype*, e.g., *Company, FishingCompany, CEO*\n\n### Edges\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(mc3_edges_lite$type) %>% unique()\n```\n:::\n\n\n`supertype` - type of relationship, either *Ownership*, *Employment, Relationship.*\n\n`subtype` - subcategory of *supertype*, e.g., *Shareholdership, BeneficialOwnership, FamilyRelationship*\n:::\n\n## 3.3 Preparing the data\n\nWith the considerations above, we will shape the data needed for our graph visualization.\n\n::: panel-tabset\n### Nodes\n\nFor nodes, we will also assign a shape for visualization depending on *supertype.* For people, we will use üìê, while we use üî¥ for organizations.\n\nLastly, we will assign numbers to each node as an alternative label to the ids (as they are long).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nPERSON_SHAPE = \"triangle\"\nORGANIZATION_SHAPE = \"circle\"\n\nmc3_nodes_clean <- mc3_nodes_lite %>%\n  mutate(\n    supertype = strsplit(type, \".\", fixed=TRUE) %>% sapply('[', 2),\n    # Get the last type as subtype. In the case of Entity.Person,\n    # both supertype and subtype are \"Person\".\n    subtype = strsplit(type, \".\", fixed=TRUE) %>% sapply(tail, n=1),\n    num = row_number(),\n    shape = ifelse(supertype == \"Person\", PERSON_SHAPE, ORGANIZATION_SHAPE)\n  ) %>%\n  select(id, num, supertype, subtype, shape)\n\nkable(head(mc3_nodes_clean))\n```\n:::\n\n\nLet's also check if `supertype`, `subtype`, and `shape` have been mapped correctly.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_nodes_clean %>%\n  group_by(supertype, subtype, shape) %>%\n  summarize(count = n()) %>%\n  arrange(-count) %>%\n  kable()\n```\n:::\n\n\n### Edges\n\nFor `ggraph` to plot the edges correctly, we need to assigns weights to the edges. For simplicity, let us assign the number of edges with the same `source`, `target` and `type`.\n\nLastly, we will change `source` and `target` to `from` and `to`, respectively for compatibility with network functions we will use.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_edges_clean <- mc3_edges_lite %>%\n  rename(from = source, to = target, ) %>%\n  mutate(\n    supertype = ifelse(\n      grepl(\"Event.Owns\", type),\n      \"Ownership\",\n      ifelse(grepl(\"Relationship\", type), \"Relationship\", \"Employment\")\n    ),\n    subtype = strsplit(type, \".\", fixed = TRUE) %>% sapply(tail, n = 1)\n  ) %>%\n  filter(from != to) %>%\n  group_by(from, to, supertype, subtype) %>%\n  summarize(weight = n())\n\nkable(head(mc3_edges_clean))\n```\n:::\n\n\nLastly, let's check if `type` has been mapped correctly to `supertype` and `subtype`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_edges_clean %>%\n  group_by(supertype, subtype) %>%\n  summarize(count = n()) %>%\n  arrange(-count) %>%\n  kable()\n```\n:::\n\n:::\n\n## 3.4 Preparing the supernetwork\n\nWe will prepare the supernetwork from the nodes and edges we prepared.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsupernetwork = graph_from_data_frame(\n  mc3_edges_clean, vertices = mc3_nodes_clean, directed = TRUE)\n```\n:::\n\n\nWe call this a supernetwork as this is a collection of smaller, unconnected network\n\n::: {.callout-tip appearance=\"simple\"}\n### Why use \\`graph_from_data_frame\\` instead of \\`tbl_graph\\`?\n\n`tbl_graph` requires the node and edge columns to be `character`. However, `graph_from_data_frame` does not require this and it can be used with both `ggraph` and `igraph`.\n\nHence, we will use this for convenience so we don't need to convert to `character` everytime we add new columns to the node and edges.\n:::\n\n# 4 Investigating *SouthSeafood Express Corp*\n\nFrom VAST Challenge 2024 [Mini-case 3](https://vast-challenge.github.io/2024/MC3.html):\n\n> Identify the network associated with SouthSeafood Express Corp and visualize how this network and competing businesses change as a result of their illegal fishing behavior. Which companies benefited from SouthSeafood Express Corp legal troubles? Are there other suspicious transactions that may be related to illegal fishing? Provide visual evidence for your conclusions.\n\n## Solving the smaller problem first\n\nAlthough the question about *SouthSeafood Express Corp* is the last question, we will start with investigating its relationships so we can generalize to make inferences to the rest of the network, for Question 3.\n\nTo do the investigation, our strategy is to start with the smallest network first to the biggest. We will be looking at:\n\n1.  Direct neighbors - They have the strongest influence on and can be influenced the most by *SouthSeafood Express Corp.*\n2.  Sphere of influence - Based on [Nicholas A. Christakis and James H. Fowler's theory](https://www.strategy-business.com/article/10218) that influence gradually dissipates and eventually cease to be notable beyond the **3rd degree of separation**.\n3.  Full connected network - We will look at the entire network containing the nodes that have paths to *SouthSeafood Express Corp.*\n\nIn order to do this, we need to identify the *SouthSeafood Express Corp* node first.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nssfec_node <- which(V(supernetwork)$name == \"SouthSeafood Express Corp\")\n```\n:::\n\n\nWe will use `ego()` and `induced_graph()` functions from `igraph` to generate the subnetworks related to this node.\n\nWe will use the function below to get the subgraphs:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nextract_subgraph <- function(graph, nodes, distance, directed = TRUE) {\n  vertices <- ego(graph, nodes = nodes, order = distance)[[1]]\n  igraph_subgraph <- induced_subgraph(graph, vids = vertices)\n  nodes_df <- as_data_frame(ssfec_direct_neighbors, what = \"vertices\") %>% rename(id = name)\n  edges_sf <- as_data_frame(ssfec_direct_neighbors, what = \"edges\")\n  graph_from_data_frame(edges_sf, vertices=nodes_df, directed=TRUE)\n}\n```\n:::\n\n\n## 4.1 Direct Neighbors\n\nWe will first extract the direct neighbors for *SouthSeafood Express Corp.*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nssfec_direct_neighbors <- extract_subgraph(supernetwork, ssfec_node, 1, directed=TRUE)\n\nggraph(ssfec_direct_neighbors, layout = \"nicely\") +\n  geom_node_point() +\n  geom_edge_link()\n```\n:::\n\n\nWe will first extract the direct neighbors for *SouthSeafood Express Corp.*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_nodes <- as_tibble(mc3_data$nodes) %>%\n  mutate(\n    id = as.character(id),\n    subtype = strsplit(type, \".\", fixed=TRUE) %>% sapply(tail, n=1),\n    type = strsplit(type, \".\", fixed=TRUE) %>% sapply('[', 2),\n    num = as.character(row_number())\n  ) %>%\n  select(id, num, type, subtype)\n\nmc3_nodes %>% head(n = 10) %>% kable()\n```\n:::\n\n\n## Extracting Edges\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_edges <- as_tibble(mc3_data$links) %>%\n  mutate(\n    from = as.character(source),\n    to = as.character(target),\n    subtype = strsplit(type, \".\", fixed = TRUE) %>% sapply(tail, n = 1),\n    type = ifelse(\n      grepl(\"Event.Owns\", type),\n      \"Ownership\",\n      ifelse(grepl(\"Relationship\", type), \"Relationship\", \"Employment\")\n    ),\n    weight = 1\n  ) %>%\n  filter(from != to) %>%\n  select(from, to, type, subtype, weight)#%>%\n  #group_by(from, to, type) %>%\n  #summarize(\n  #  subtype = paste(subtype, collapse = \" + \"),\n  #  weight = n()\n  #)\n\nmc3_edges %>% head(n = 10) %>% kable()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_resource_flow <- mc3_edges %>% filter(subtype == \"WorksFor\") %>% mutate(weight = 1)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfamily <- mc3_edges %>% filter(subtype == \"FamilyRelationship\") %>% mutate(weight = 1)\nfamily_reverse <- family %>% mutate(\n  temp = to,\n  to = from,\n  from = temp\n) %>% select(from, to, type, subtype, weight)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nshareholdership <- mc3_edges %>% filter(subtype == \"Shareholdership\") %>% mutate(weight = 1) %>% mutate(\n  temp = to,\n  to = from,\n  from = temp\n) %>% select(from, to, type, subtype, weight)\n\nownership <- mc3_edges %>% filter(subtype == \"BeneficialOwnership\") %>% mutate(weight = 2) %>% mutate(\n  temp = to,\n  to = from,\n  from = temp\n) %>% select(from, to, type, subtype, weight)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_resource_flow <- mc3_resource_flow %>%\n  rbind(family, family_reverse, shareholdership, ownership)\n```\n:::\n\n\n# Questions\n\n## Q4: Relations with SouthSeafood Express Corp\n\n### Direct Relations\n\n#### Edges\n\n\n::: {.cell}\n\n```{.r .cell-code}\nssfec_edges <- mc3_edges %>%\n  filter(from == \"SouthSeafood Express Corp\" |\n           to == \"SouthSeafood Express Corp\")\nssfec_edges %>% kable()\n```\n:::\n\n\n#### Nodes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nssfec_nodes <- mc3_nodes %>%\n  filter(id %in% ssfec_edges$from |\n           id %in% ssfec_edges$to) %>%\n  mutate(\n    focus = (id == \"SouthSeafood Express Corp\")\n  )\nssfec_nodes %>% kable()\n```\n:::\n\n\n#### Graph\n\n\n::: {.cell}\n\n```{.r .cell-code}\nssfec_graph <- tbl_graph(nodes = ssfec_nodes, edges = ssfec_edges, directed = TRUE)\n#ssfec_graph <- graph_from_data_frame(ssfec_edges, vertices = ssfec_nodes, directed=TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(ssfec_graph, layout = \"linear\", circular = TRUE) +\n  \n  # Render nodes\n  geom_node_point(aes(color = focus), show.legend = FALSE, size = 30) +\n  geom_node_text(\n    aes(label = str_wrap(id, width = -1)),\n    family = font_family,\n    size = 3,\n    color = \"white\"\n  ) +\n  scale_color_manual(values = c(\"blue\", \"gold3\")) +\n  \n  # Render edges\n  geom_edge_link(\n    aes(label = subtype),\n    # Control arrow\n    arrow = arrow(type = \"closed\", length = unit(0.025, \"npc\")),\n    end_cap = circle(12, \"mm\"),\n    start_cap = circle(12, \"mm\"),\n    # Format labels\n    angle_calc = \"along\",\n    label_dodge = unit(0.04, \"npc\"),\n    family = font_family,\n    show.legend = FALSE\n  ) +\n  \n  # Hack to reduce distance between nodes\n  # This is to not clip the nodes in the edge of the plot\n  # ref: https://stackoverflow.com/a/66991383\n  ylim(-1.3, 0.8) +\n  xlim(-1, 1) +\n  \n  # Style graph\n  unset_graph_style() +\n  theme_graph(base_family = font_family, plot_margin = margin(0)) +\n  plot_annotation(\n    title = \"SouthSeafood Express Corp's Shareholders\",\n    subtitle = \"Two other fishing companies, <span style='color:blue;'>**AguaLeska Transit N.V.**</span> and <span style='color:blue;'>**Tainamarine Fishing Co**</span> hold shares in<br />SouthSeafood Express Corp. They are posed to benefit the most from the company's illegal fishing activities\") &\n  theme(\n    text = element_text(family = font_family),\n    plot.title = element_text(face = \"bold\", size = rel(1.4)),\n    plot.subtitle = element_markdown(color = \"grey50\")\n  )\n```\n:::\n\n\n### Sphere of Influence\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph <- graph_from_data_frame(mc3_edges, vertices = mc3_nodes, directed=FALSE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nssfec_node = which(V(graph)$name == \"SouthSeafood Express Corp\")\ndists <- distances(graph, v = ssfec_node) %>%\n  as.data.frame() %>%\n  pivot_longer(cols = mc3_nodes$id, names_to = \"id\", values_to = \"distance\") %>%\n  filter(distance != Inf)\n\nssfec_nodes_full_network <- dists %>%\n  left_join(mc3_nodes) %>%\n  mutate(\n    shape = ifelse(type == \"Person\", \"triangle\", \"circle\"),\n    group = ceiling(distance/3) %>% as.factor()\n  )\n\nssfec_edges_full_network <- mc3_edges %>%\n  filter(from %in% ssfec_nodes_full_network$id,\n           to %in% ssfec_nodes_full_network$id)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nssfec_nodes_influence <- ssfec_nodes_full_network %>%\n  filter(group %in% c(0, 1))\n\nssfec_edges_influence <- ssfec_edges_full_network %>%\n  filter(from %in% ssfec_nodes_influence$id,\n           to %in% ssfec_nodes_influence$id)\n\nssfec_graph_influence <- tbl_graph(nodes = ssfec_nodes_influence, edges = ssfec_edges_influence, directed = TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#set.seed(608)\nset.seed(911)\nggraph(ssfec_graph_influence, layout = \"nicely\") +\n  geom_node_point(aes(\n    color = group,\n    size = distance,\n    alpha = distance,\n    shape = shape\n    ),\n  show.legend = FALSE) +\n  geom_node_text(\n    aes(label = str_wrap(id, width = -1)),\n    family = font_family,\n    size = 2.5,\n    repel = TRUE\n  ) +\n  geom_edge_link(\n    aes(label = subtype, edge_width = weight),\n    arrow = arrow(type = \"closed\", length = unit(0.01, \"npc\")),\n    end_cap = circle(4, \"mm\"),\n    start_cap = circle(4, \"mm\"),\n    angle_calc = \"along\",\n    label_dodge = unit(0.02, \"npc\"),\n    label_size = 2,\n    family = font_family\n  ) +\n  scale_color_manual(values = c(\"gold3\", \"blue\", \"grey60\", \"grey80\")) +\n  #scale_size_manual(values = c(10, 5, 2, 1)) +\n  scale_size_continuous(range = c(10, 6)) +\n  scale_alpha_continuous(range = c(1, 0.7)) +\n  scale_edge_width(range = c(0.5, 1))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkable(ssfec_nodes_influence %>% arrange(distance))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(ssfec_graph_influence, layout = \"nicely\") +\n  geom_node_point(aes(\n    color = group,\n    size = centrality_eigen(),\n    alpha = distance,\n    shape = shape\n    ),\n  show.legend = FALSE) +\n  geom_node_text(\n    aes(label = str_wrap(id, width = -1)),\n    family = font_family,\n    size = 2.5,\n    repel = TRUE\n  ) +\n  geom_edge_link(\n    aes(label = subtype),\n    arrow = arrow(type = \"closed\", length = unit(0.01, \"npc\")),\n    end_cap = circle(4, \"mm\"),\n    start_cap = circle(4, \"mm\"),\n    angle_calc = \"along\",\n    label_dodge = unit(0.02, \"npc\"),\n    label_size = 2,\n    family = font_family\n  ) +\n  scale_color_manual(values = c(\"gold3\", \"blue\", \"grey60\", \"grey80\")) +\n  #scale_size_manual(values = c(10, 5, 2, 1)) +\n  scale_size_continuous(range = c(2, 15)) +\n  scale_alpha_continuous(range=c(1, 0.7))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(888)\ng <- ggraph(\n  ssfec_graph_influence,\n  layout = \"nicely\") +\n  geom_point_interactive(\n    aes(x = x, y = y, data_id = id, tooltip = id, color = group, shape = shape,\n    size = distance, alpha = distance),\n    show.legend = FALSE\n    )+\n  geom_node_label(\n    aes(label = num),\n    family = font_family,\n    size = 2\n  ) +\n  geom_edge_link(\n    aes(color = subtype, label = subtype,\n      xend = jitter(xend, amount = 0.1), yend = jitter(yend, amount = 0.1)),\n    arrow = arrow(type = \"closed\", length = unit(0.01, \"npc\")),\n    end_cap = circle(4, \"mm\"),\n    start_cap = circle(4, \"mm\"),\n    check_overlap = TRUE,\n    angle_calc = \"along\",\n    label_dodge = unit(0.02, \"npc\"),\n    label_size = 2\n  ) +\n  scale_size_continuous(range = c(20, 10)) +\n  scale_color_manual(values = c(\"gold3\", \"blue\", \"grey60\", \"grey80\")) +\n  scale_alpha_continuous(range=c(1, 0.5))\n\ngirafe(                                  \n  ggobj = g,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)\n```\n:::\n\n\n### Full Network\n\n\n::: {.cell}\n\n```{.r .cell-code}\nssfec_graph_full_network <- tbl_graph(nodes = ssfec_nodes_full_network, edges = ssfec_edges_full_network, directed = TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(888)\ng <- ggraph(\n  ssfec_graph_full_network,\n  layout = \"nicely\") +\n  geom_point_interactive(\n    aes(x = x, y = y, data_id = id, tooltip = id, color = group, shape = shape,\n    size = distance, alpha = distance),\n    show.legend = FALSE\n    )+\n  geom_node_label(\n    aes(label = num),\n    family = font_family,\n    size = 2\n  ) +\n  geom_edge_link(\n    aes(color = subtype,\n      xend = jitter(xend, amount = 0.1), yend = jitter(yend, amount = 0.1)),\n    arrow = arrow(type = \"closed\", length = unit(0.01, \"npc\")),\n    #end_cap = circle(4, \"mm\"),\n    #start_cap = circle(4, \"mm\")\n  ) +\n  scale_size_continuous(range = c(15, 5)) +\n  scale_color_manual(values = c(\"gold3\", \"blue\", \"grey60\", \"grey80\")) +\n  scale_alpha_continuous(range=c(1, 0.5))\n\ngirafe(                                  \n  ggobj = g,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(888)\ng <- ggraph(\n  ssfec_graph_full_network,\n  layout = \"nicely\") +\n  geom_point_interactive(\n    aes(x = x, y = y, data_id = id, tooltip = id, color = group, shape = shape,\n    size = centrality_betweenness()),\n    show.legend = FALSE\n    )+\n  geom_node_label(\n    aes(label = num),\n    family = font_family,\n    size = 2\n  ) +\n  geom_edge_link(\n    aes(color = subtype,\n      #xend = jitter(xend, amount = 0.1), yend = jitter(yend, amount = 0.1)\n      ),\n    arrow = arrow(type = \"closed\", length = unit(0.01, \"npc\")),\n    #end_cap = circle(4, \"mm\"),\n    #start_cap = circle(4, \"mm\")\n  ) +\n  scale_size_continuous(range = c(10, 3)) +\n  scale_color_manual(values = c(\"gold3\", \"blue\", \"grey60\", \"grey80\")) +\n  scale_alpha_continuous(range=c(1, 0.5))\n\ngirafe(                                  \n  ggobj = g,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(888)\ng <- ggraph(\n  ssfec_graph_full_network,\n  layout = \"nicely\") +\n  geom_point_interactive(\n    aes(x = x, y = y, data_id = id, tooltip = id, color = group, shape = shape,\n    size = centrality_closeness()),\n    show.legend = FALSE\n    )+\n  geom_node_label(\n    aes(label = num),\n    family = font_family,\n    size = 2\n  ) +\n  geom_edge_link(\n    aes(color = subtype,\n      #xend = jitter(xend, amount = 0.1), yend = jitter(yend, amount = 0.1)\n      ),\n    arrow = arrow(type = \"closed\", length = unit(0.01, \"npc\")),\n    #end_cap = circle(4, \"mm\"),\n    #start_cap = circle(4, \"mm\")\n  ) +\n  scale_size_continuous(range = c(5, 10)) +\n  scale_color_manual(values = c(\"gold3\", \"blue\", \"grey60\", \"grey80\")) +\n  scale_alpha_continuous(range=c(1, 0.5))\n\ngirafe(                                  \n  ggobj = g,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(888)\ng <- ggraph(\n  ssfec_graph_full_network,\n  layout = \"nicely\") +\n  geom_point_interactive(\n    aes(x = x, y = y, data_id = id, tooltip = id, color = group, shape = shape,\n    size = centrality_eigen()),\n    show.legend = FALSE\n    )+\n  geom_node_label(\n    aes(label = num),\n    family = font_family,\n    size = 2\n  ) +\n  geom_edge_link(\n    aes(color = subtype,\n      #xend = jitter(xend, amount = 0.1), yend = jitter(yend, amount = 0.1)\n      ),\n    arrow = arrow(type = \"closed\", length = unit(0.01, \"npc\")),\n    #end_cap = circle(4, \"mm\"),\n    #start_cap = circle(4, \"mm\")\n  ) +\n  scale_size_continuous(range = c(5, 10)) +\n  scale_color_manual(values = c(\"gold3\", \"blue\", \"grey60\", \"grey80\")) +\n  scale_alpha_continuous(range=c(1, 0.5))\n\ngirafe(                                  \n  ggobj = g,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nssfec_edges_resource <- mc3_resource_flow %>%\n  filter(from %in% ssfec_nodes_influence$id,\n           to %in% ssfec_nodes_influence$id)\n\nssfec_graph_resources <- tbl_graph(nodes = ssfec_nodes_influence, edges = ssfec_edges_resource, directed = TRUE)\n\nauthority_scores <- authority_score(ssfec_graph_resources)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(888)\nssfec_graph_resources <- ssfec_graph_resources %>% mutate(authority_centrality = centrality_authority())\n\ng <- ggraph(\n  ssfec_graph_resources,\n  layout = \"nicely\") +\n  geom_point_interactive(\n    aes(x = x, y = y, data_id = id, tooltip = id, color = group, shape = shape,\n    size = authority_centrality),\n    show.legend = FALSE\n    )+\n  geom_node_label(\n    aes(label = num),\n    family = font_family,\n    size = 2\n  ) +\n  geom_edge_link(\n    aes(color = subtype,\n      #xend = jitter(xend, amount = 0.1), yend = jitter(yend, amount = 0.1)\n      ),\n    arrow = arrow(type = \"closed\", length = unit(0.01, \"npc\")),\n    #end_cap = circle(4, \"mm\"),\n    #start_cap = circle(4, \"mm\")\n  ) +\n  scale_size_continuous(range = c(5, 10)) +\n  scale_color_manual(values = c(\"gold3\", \"blue\", \"grey60\", \"grey80\")) +\n  scale_alpha_continuous(range=c(1, 0.5))\n\ngirafe(                                  \n  ggobj = g,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n# References\n\n<https://blogs.cornell.edu/info2040/2015/10/19/three-degrees-of-influence-how-far-can-you-reach-people/>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}