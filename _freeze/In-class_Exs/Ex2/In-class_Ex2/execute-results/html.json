{
  "hash": "5ef6dfe5915d06ee94b1aa25a61447a3",
  "result": {
    "markdown": "---\ntitle: \"In-class Exercise 2: Visualizing distribution\"\nauthor: \"Kristine Joy Paas\"\ndate: \"20 April 2024\"\ndate-modified: \"last-modified\"\nformat: html\nexecute: \n  echo: true\n  eval: true\n  warning: false\n  freeze: true\n---\n\n\n# 1 Overview\n\nFrom exercise published on <https://r4va.netlify.app/chap09>\n\nI learned the following:\n\n-   Different ways to visualize distribution\n\n-   Ridgeline plot using `ggridges`\n\n-   Raincloud plot using `ggdists`\n\n# 2 Setup\n\n## 2.1 Loading the R packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, ggdist, ggthemes, ggridges, colorspace)\n```\n:::\n\n\n## 2.2 Importing the data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam_df <- read_csv(\"data/Exam_data.csv\")\n```\n:::\n\n\n# 3 Probability Density Graph\n\n## 3.1 Histogram\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam_df, aes(x=ENGLISH)) +\n  geom_histogram(color = \"#1696d2\",\n               adjust = 0.65,\n               alpha = 0.6)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex2_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## 3.2 Probability Density Diagram\n\nIt uses `geom_density()` from `ggdist` package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam_df, aes(x=ENGLISH)) +\n  geom_density(color = \"#1696d2\",\n               adjust = 0.65,\n               alpha = 0.6,)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex2_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n## 3.3 Alternative design\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmedian_eng <- median(exam_df$ENGLISH)\nmean_eng <- mean(exam_df$ENGLISH)\nstd_eng <- sd(exam_df$ENGLISH)\n\nggplot(exam_df, aes(x=ENGLISH)) +\n  geom_density(color = \"#1696d2\",\n               adjust = 0.65,\n               alpha = 0.6,) +\n  stat_function(\n    fun=dnorm,\n    args = list(mean=mean_eng, sd = std_eng),\n    col = \"grey30\",\n    size = 0.8)+\n    geom_vline(aes(xintercept=mean_eng), color = \"#4d5887\", linewidth = 0.6, linetype = \"dashed\")+\n  annotate(geom = \"text\",\n           x = mean_eng - 10,\n           y = 0.04,\n           label = paste0(\"Mean ENGLISH:\", round(mean_eng), 2),\n           color = \"#4d5887\") +\n  geom_vline(aes(xintercept=median_eng), color = \"#4d5887\", linewidth = 0.6) +\n  annotate(geom = \"text\",\n           x = median_eng + 10,\n           y = 0.04,\n           label = paste0(\"Median ENGLISH:\", round(median_eng), 2),\n           color = \"#4d5887\")\n```\n\n::: {.cell-output-display}\n![](In-class_Ex2_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n# 4 Ridgeline Plot\n\n[*Ridgeline plot*](https://www.data-to-viz.com/graph/ridgeline.html) (sometimes called *Joyplot*) is a data visualisation technique for revealing the **distribution of a numeric value for several groups**. Distribution can be represented using histograms or density plots, all aligned to the same horizontal scale and presented with a **slight overlap**.\n\nIt makes sense for distributions with **5 or more groups**.\n\n## 4.1 **Plotting ridgeline graph: ggridges method**\n\nggridges package provides two main geom to plot gridgeline plots, they are: [`geom_ridgeline()`](https://wilkelab.org/ggridges/reference/geom_ridgeline.html) and [`geom_density_ridges()`](https://wilkelab.org/ggridges/reference/geom_density_ridges.html).\n\n[`geom_ridgeline()`](https://wilkelab.org/ggridges/reference/geom_ridgeline.html) plots the graph using the height values from the data directly. It is useful when the height values refer to a column directly.\n\nFor this particular dataset, it is more appropriate to use [`geom_density_ridges()`](https://wilkelab.org/ggridges/reference/geom_density_ridges.html) as we need to plot the distribution of students' English score. If we had tallied and aggregated the number of students who scores within score ranges, [`geom_ridgeline()`](https://wilkelab.org/ggridges/reference/geom_ridgeline.html) might be appropriate but it isn't the case.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show ggplot2 code\"}\nggplot(exam_df, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex2_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n## 4.2 Varying colors along the x-axis\n\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis. This effect can be achieved by using either [`geom_ridgeline_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html) or [`geom_density_ridges_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html). Both geoms work just like `geom_ridgeline()` and `geom_density_ridges()`, except that they allow for varying fill colors. However, t**hey do not allow for alpha transparency in the fill**. For technical reasons, we can have **changing fill colors or transparency but not both**.\n\nIf we need emphasize the actual values with color gradient, using **colors** is appropriate. However, It may not be necessary when **there are fewer ridge graphs**, since the farthest graph is still relatively close to the axis.\n\nHowever, in the plot below, it can be more easily seen that **3I scored lowest**, while **3A scored the highest** among the different classes. Hence, in this case, colors are really valuable.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show ggplot2 code\"}\nggplot(exam_df, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = after_stat(x))) + # changed from stat() as it is deprecated\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex2_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n## 4.3 Mapping the probabilities directly into color\n\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called [`stat_density_ridges()`](https://wilkelab.org/ggridges/reference/stat_density_ridges.html) that replaces [`stat_density()`](https://ggplot2.tidyverse.org/reference/geom_density.html) of ggplot2.\n\nFigure below is plotted by mapping the probabilities calculated by using `stat(ecdf)` which represent the empirical cumulative density function for the distribution of English score.\n\n::: {.callout-note appearance=\"simple\"}\nWe are using the probabilities from `stat(ecdf)` in the `fill` aesthetic of the plot so the probabilities affect the color fill.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show ggplot2 code\"}\nggplot(exam_df,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex2_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n## 4.4 **Ridgeline plots with quantile lines**\n\nBy using [`geom_density_ridges_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html), we can colour the ridgeline plot by quantile, via the calculated `stat(quantile)` aesthetic as shown in the figure below.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show ggplot2 code\"}\nggplot(exam_df,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex2_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nInstead of using number to define the quantiles, we can also **specify quantiles** by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show ggplot2 code\"}\nggplot(exam_df,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex2_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n# 5 Raincloud Plot\n\nRaincloud Plot is a data visualisation technique that produces a **half-density** to a distribution plot. The raincloud (half-density) plot enhances the traditional box-plot by highlighting multiple modalities (an indicator that **groups may exist**). The boxplot does not show where **densities are clustered**, but the raincloud plot does!\n\nThe raincloud plot will be generated by functions in `ggplot2` and `ggdist` packages.\n\n## 5.1 Plotting a Half-eye plot\n\nWe will plot a Half-Eye graph by using [`stat_halfeye()`](https://mjskay.github.io/ggdist/reference/stat_halfeye.html) of **ggdist** package.\n\nIt contains a half-density and slab interval graph.\n\n::: panel-tabset\n### With slab interval\n\nThe slab interval is similar to a box plot and it shows the relevant quantiles of the data.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show ggplot2 code\"}\nggplot(exam_df, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex2_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n### Without slab interval\n\nSetting `.width = 0, point_colour = NA` will remove the slab interval. Slab interval may be useful for some use cases but rendering a box plot or removing it together may be more useful for visualization.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show ggplot2 code\"}\nggplot(exam_df, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex2_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n:::\n\n## 5.2 Adding a boxplot\n\nWe can replace the slab interval with a narrow boxplot. It provides more aesthetic presentation of the distribution and fills the gap between the half-eye plot and the gridlines.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show ggplot2 code\"}\nggplot(exam_df, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex2_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n## 5.3 Adding Volume information\n\nThe distribution plot so far gives information on the **relative** distribution. However, it is hard to know the absolute volume within each bin. We can use [`stat_dots()`](https://mjskay.github.io/ggdist/reference/stat_dots.html) of `ggdist` package to generate this.\n\nWe will plot it on the same side as the half-eye plot.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show ggplot2 code\"}\nggplot(exam_df, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex2_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nBy adding the volume dots, we can see that the `Others` plot actually has **less observations** that the other `Race` values, even though the curve looks taller. It **reduces misinterpretation** of the data.\n\n## 5.4 Finishing touches\n\nLastly, we can flip the coordinates and add a theme to make it more presentable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam_df, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex2_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n# 6 Reflections\n\nAlthough the **Probability Density Graph**, **Ridgeline** **Plot**, and **Boxplot** are effective for presenting information about the distribution **within a group**. However, the information may not be enough and can even be misleading if multiple groups are plotted within a single graph. Hence, volume graph is a very important addition as it shows how each group compare among each other.\n\nThis is my first time to encounter this kind of visualization and I think it is very powerful. Left and right Raincloud plots can also be presented side by side to compare to data subsets, like in a senior, Kylie Tan's [work](https://akalestale.netlify.app/take-home_ex/take-home_ex01/take-home_ex01).\n\nAlthough this visualization is powerful, I must take care to not overuse it even if I like it. It is always important to be clear on what message I want to communicate and use that to judge if this visualization is appropriate.\n",
    "supporting": [
      "In-class_Ex2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}