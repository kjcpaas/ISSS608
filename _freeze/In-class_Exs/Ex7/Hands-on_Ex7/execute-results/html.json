{
  "hash": "7d51ef911e17388f25087ef6ab4b815d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on Exercise 7: Visualising and Analysing Time-Oriented Data\"\nauthor: \"Kristine Joy Paas\"\ndate: \"31 May 2024\"\ndate-modified: \"last-modified\"\nformat: html\nexecute: \n  echo: true\n  eval: true\n  warning: false\n  freeze: true\n---\n\n\n# 1 Overview\n\nThis hands-on exercise covers [Chapter 17: Visualising and Analysing Time-oriented Data](https://r4va.netlify.app/chap17). I learned about the following:\n\n-   plotting a calendar heatmap by using ggplot2 functions,\n-   plotting a cycle plot by using ggplot2 function,\n-   plotting a slopegraph\n-   plotting a horizon chart2 Getting Started\n\n# 2 Getting Started\n\n## 2.1 Loading the required packages\n\nFor this exercise we will use the following R packages:\n\n-   scales\n-   viridis\n-   [lubridate](https://lubridate.tidyverse.org/)\n-   ggthemes\n-   gridExtra\n-   readxl\n-   knitr\n-   data.table\n-   tidyverse\n-   CGPfunctions - Added for `newggslopegraph()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(scales,\n               viridis,\n               lubridate,\n               ggthemes,\n               gridExtra,\n               readxl,\n               knitr,\n               data.table,\n               tidyverse,\n               CGPfunctions)\n```\n:::\n\n\n# 3 Plotting Calendar Heatmap\n\n## 3.1 Importing the Data\n\nWe will import *eventlog.csv* file into the RStudio environment\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattacks <- read_csv(\"data/eventlog.csv\")\nkable(head(attacks))\n```\n\n::: {.cell-output-display}\n\n\n|timestamp           |source_country |tz              |\n|:-------------------|:--------------|:---------------|\n|2015-03-12 15:59:16 |CN             |Asia/Shanghai   |\n|2015-03-12 16:00:48 |FR             |Europe/Paris    |\n|2015-03-12 16:02:26 |CN             |Asia/Shanghai   |\n|2015-03-12 16:02:38 |US             |America/Chicago |\n|2015-03-12 16:03:22 |CN             |Asia/Shanghai   |\n|2015-03-12 16:03:45 |CN             |Asia/Shanghai   |\n\n\n:::\n:::\n\n\n## 3.2 Data Preparation\n\nWe want to create the heatmap with the *day of the week* and *hour of day*. We will add columns corresponding to this.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_hr_wkday <- function(ts, sc, tz) {\n  # Code changed. See note below\n  local_times <- ymd_hms(ts) %>% with_tz(tzone = tz[1])\n  dt <- data.table(\n    source_country = sc,\n    wkday = weekdays(local_times),\n    hour = hour(local_times)\n  )\n  return(dt)\n}\n```\n:::\n\n\n::: {.callout-note collapse=\"true\"}\n### Issue with original code\n\nConsider the following:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattacks %>% slice(2:3) %>% kable()\n```\n\n::: {.cell-output-display}\n\n\n|timestamp           |source_country |tz            |\n|:-------------------|:--------------|:-------------|\n|2015-03-12 16:00:48 |FR             |Europe/Paris  |\n|2015-03-12 16:02:26 |CN             |Asia/Shanghai |\n\n\n:::\n:::\n\n\nAs Paris is in **GMT+1** (because of Daylight Savings Time) and Shanghai is in **GMT+8**, we are expecting the local times to be `2015-03-12 18:00:48` and `2015-03-13 00:02:26`, respectively.\n\nHowever, the original code does not generate these times, and consider the supplied timestamp as the time in the local zone. However, standard practice is these times are in UTC, which need to be converted in the local time.\n\nThe original code might be correct with the context (which I have no way of verifying). However, I still wanted to challenge myself to convert if the supplied timestamps are in UTC.\n\n**Original**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nymd_hms(\"2015-03-12 16:00:48\", tz = \"Europe/Paris\"[1], quiet=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2015-03-12 16:00:48 CET\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nymd_hms(\"2015-03-12 16:02:26\", tz = \"Asia/Shanghai\"[1], quiet=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2015-03-12 16:02:26 CST\"\n```\n\n\n:::\n:::\n\n\n**My adjustments**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nymd_hms(\"2015-03-12 16:00:48\") %>% with_tz(tzone = \"Europe/Paris\"[1])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2015-03-12 17:00:48 CET\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nymd_hms(\"2015-03-12 16:02:26\") %>% with_tz(tzone = \"Asia/Shanghai\"[1])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2015-03-13 00:02:26 CST\"\n```\n\n\n:::\n:::\n\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwkday_levels <- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks_cleaned <- attacks %>%\n  group_by(tz) %>%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %>% \n  ungroup() %>% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n\nkable(head(attacks_cleaned))\n```\n\n::: {.cell-output-display}\n\n\n|tz           |source_country |wkday    |hour |\n|:------------|:--------------|:--------|:----|\n|Africa/Cairo |BG             |Saturday |22   |\n|Africa/Cairo |TW             |Sunday   |8    |\n|Africa/Cairo |TW             |Sunday   |10   |\n|Africa/Cairo |CN             |Sunday   |13   |\n|Africa/Cairo |US             |Sunday   |17   |\n|Africa/Cairo |CA             |Monday   |13   |\n\n\n:::\n:::\n\n\n## 3.3 Building the Calendar Heatmap\n\nWe will use `geom_tile()` to generate the tiles for the heatmap.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrouped <- attacks_cleaned %>% \n  count(wkday, hour) %>% \n  ungroup() %>%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex7_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n::: {.callout-tip appearance=\"minimal\"}\nSome shift is observed compared to the original because we changed how the date is parsed. The highest attack is in China so the shift is approximately +8 hours.\n:::\n\n## 3.4 Generating data per country\n\nNext, we will plot the heatmaps per country. To do that, we need to do more data preparation.\n\nWe will first calculate the attacks per country.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattacks_by_country <- count(\n  attacks_cleaned, source_country) %>%\n  mutate(percent = percent(n/sum(n))) %>%\n  arrange(desc(n))\n```\n:::\n\n\nNext, we will count the attacks per wkday, per hour for each of the top4 countries.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop4 <- attacks_by_country$source_country[1:4]\ntop4_attacks <- attacks_cleaned %>%\n  filter(source_country %in% top4) %>%\n  count(source_country, wkday, hour) %>%\n  ungroup() %>%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %>%\n  na.omit()\n```\n:::\n\n\n## 3.5 Plotting the heatmaps\n\nUsing the prepared data, we generate the heatmaps using facet.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex7_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n# 4 Plotting Cycle Plot\n\n## 4.1 Data Import\n\n\n::: {.cell}\n\n```{.r .cell-code}\nair <- read_excel(\"data/arrivals_by_air.xlsx\")\n```\n:::\n\n\n## 4.2 Deriving month and year\n\n\n::: {.cell}\n\n```{.r .cell-code}\nair$month <- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year <- year(ymd(air$`Month-Year`))\n```\n:::\n\n\n## 4.3 Extracting the target country\n\n\n::: {.cell}\n\n```{.r .cell-code}\nVietnam <- air %>% \n  select(`Vietnam`, \n         month, \n         year) %>%\n  filter(year >= 2010)\n```\n:::\n\n\n## 4.4 Computing monthly averages by month\n\nWe will use this to plot the reference line\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhline.data <- Vietnam %>% \n  group_by(month) %>%\n  summarise(avgvalue = mean(`Vietnam`))\n```\n:::\n\n\n## 4.5 Plotting the graph\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\") +\n  theme_tufte(base_family = \"Helvetica\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex7_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n# 5 Plotting Slope Graph\n\n## 5.1 Data import\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrice <- read_csv(\"data/rice.csv\")\n```\n:::\n\n\n## 5.2 Generating Slopegraph\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrice %>% \n  mutate(Year = factor(Year)) %>%\n  filter(Year %in% c(1961, 1980)) %>%\n  newggslopegraph(Year, Yield, Country,\n                Title = \"Rice Yield of Top 11 Asian Counties (1961-1980)\",\n                SubTitle = \"Japan and Korea consistently have the highest rice yield\",\n                Caption = \"For ISS608\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex7_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n# 6 Reflections\n\nThese visualization techniques are indeed useful. The Calendar Heatmap is one I am most familiar with as it is used by Github to visualize activity. Some people even aim to make all tiles green and therefore make commits daily.\n\nThe Cycle graph looks the most straightforward as they seem to be just facets (which has already been covered below.\n\nLastly, the Slope Graph is most appropriate to visualize trends, even for a high number of categories.\n\nHowever, in terms of graph/network data, which is needed for MC3 that we will be doing for Take-home Ex3, the techniques above may not be enough. Therefore, I will still rely on other techniques outside this or rely on my own creativity. The latter is more exciting for me as I want to challenge myself to do what hasn't been done.\n",
    "supporting": [
      "Hands-on_Ex7_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}