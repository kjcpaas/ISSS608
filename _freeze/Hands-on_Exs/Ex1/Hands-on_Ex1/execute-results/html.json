{
  "hash": "55486864b46666d421a3a680624c9bcb",
  "result": {
    "markdown": "---\ntitle: \"Hands-on Exercise 1:  A Layered Grammar of Graphics: ggplot2 methods\"\nauthor: \"Kristine Joy Paas\"\ndate: \"11 April 2024\"\ndate-modified: \"last-modified\"\nformat: html\nexecute: \n  echo: true\n  eval: true\n  warning: false\n  freeze: true\n---\n\n\n# Overview\n\nThis hands-on exercise covers [Chapter 1: A Layered Grammar of Graphics: ggplot2 methods](https://r4va.netlify.app/chap01).\n\nI learned about the following:\n\n-   Useful functions and components in `ggplot2` .\n\n-   Grammar of Graphics to guide how data is visualized\n\n# Getting Started\n\n## Loading the required libraries\n\n::: {.callout-note appearance=\"minimal\"}\nMark this chunk for setup so it ensures loading of required libraries when another code chunk is run\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse)\n```\n:::\n\n\n## Loading the data\n\nWe first need to download the provided data set from eLearn and put it under the data folder.\n\n::: {.callout-note collapse=\"true\"}\n### File structure\n\n![](images/file_structure.png)\n:::\n\nNext, read the data by using `read_csv()` from [readr](https://readr.tidyverse.org/) package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam_data <- read_csv(\"data/Exam_data.csv\")\nglimpse(exam_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 322\nColumns: 7\n$ ID      <chr> \"Student321\", \"Student305\", \"Student289\", \"Student227\", \"Stude…\n$ CLASS   <chr> \"3I\", \"3I\", \"3H\", \"3F\", \"3I\", \"3I\", \"3I\", \"3I\", \"3I\", \"3H\", \"3…\n$ GENDER  <chr> \"Male\", \"Female\", \"Male\", \"Male\", \"Male\", \"Female\", \"Male\", \"M…\n$ RACE    <chr> \"Malay\", \"Malay\", \"Chinese\", \"Chinese\", \"Malay\", \"Malay\", \"Chi…\n$ ENGLISH <dbl> 21, 24, 26, 27, 27, 31, 31, 31, 33, 34, 34, 36, 36, 36, 37, 38…\n$ MATHS   <dbl> 9, 22, 16, 77, 11, 16, 21, 18, 19, 49, 39, 35, 23, 36, 49, 30,…\n$ SCIENCE <dbl> 15, 16, 16, 31, 25, 16, 25, 27, 15, 37, 42, 22, 32, 36, 35, 45…\n```\n:::\n:::\n\n\n# **R Graphics VS ggplot**\n\nFirst we will compare the basic R Graphics functions and `ggplot`.\n\n::: panel-tabset\n## R Graphics\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(exam_data$MATHS)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## ggplot2\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n:::\n\n::: callout-note\n## Reflections\n\nR Graphics looks very each to use to generate a histogram. `ggplot2` requires more code to generate a simple histogram.\n\nHowever, `ggplot2` may offer more features to customize the plot and is not limited to just histograms.\n:::\n\n# Grammar of Graphics\n\nBuilding blocks for the layers of Grammar of Graphics\n\n-   **Data**: The dataset being plotted.\n\n-   **Aesthetics** take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\n\n-   **Geometrics**: The visual elements used for our data, such as point, bar or line.\n\n-   **Facets** split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\n\n-   **Statistics**, statiscal transformations that summarise data (e.g. mean, confidence intervals).\n\n-   **Coordinate systems** define the plane on which data are mapped on the graphic.\n\n-   **Themes** modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background.\n\n# Grammatical Elements Using ggplot2\n\n## Data\n\nThe data layer contains the **dataset to be visualized**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nThis generated an empty plot as no visual elements have been added to `ggplot2` call.\n\n## Aesthetic Mappings\n\nThe aesthetic mappings take attributes of the data and and use them to **influence visual characteristics**, such as position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.\n\nAll aesthetics of a plot are specified in the [`aes()`](https://ggplot2.tidyverse.org/reference/aes.html) function call.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nThis maps the `MATHS` column of `exam_data` to the x-axis of the plot. The axis range is based on the range of this dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmin(exam_data[\"MATHS\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmax(exam_data[\"MATHS\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 99\n```\n:::\n:::\n\n\n## Geometrics\n\n### Types\n\nGeometric objects are the actual marks we put on a plot. Examples include:\n\n-   *geom_point* for drawing individual points (e.g., a scatter plot)\n\n-   *geom_line* for drawing lines (e.g., for a line charts)\n\n-   *geom_smooth* for drawing smoothed lines (e.g., for simple trends or approximations)\n\n-   *geom_bar* for drawing bars (e.g., for bar charts)\n\n-   *geom_histogram* for drawing binned values (e.g. a histogram)\n\n-   *geom_polygon* for drawing arbitrary shapes\n\n-   *geom_map* for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).\n\nA plot can have multiple **geometrics**. Other available geometrics can be found in <https://ggplot2.tidyverse.org/reference/#section-layer-geoms>.\n\n### geom_bar()\n\n[geom_bar()](https://ggplot2.tidyverse.org/reference/geom_bar.html) plots a bar chart.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n### geom_dotplot()\n\n[geom_dotplot()](https://ggplot2.tidyverse.org/reference/geom_dotplot.html) is appropriate for **binned data**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nVertical scale is misleading so let's just remove it.\n\n::: callout-note\n#### Note\n\n-   `scale_y_continuous()` is used to turn off the y-axis, and\n\n-   *binwidth argument* is used to change the binwidth to 2.5.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n### geom_histogram()\n\n[geom_histogram()](https://ggplot2.tidyverse.org/reference/geom_histogram.html) is for generating a histogram. (default bin = 30)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nLet's change the histogram bin and color.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")  \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n### Changing geometry by using aes()\n\nIn this example, we partition the data (e.g. Female vs Male) and color each bar corresponding to the partition differently.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n### geom_density()\n\n[`geom-density()`](https://ggplot2.tidyverse.org/reference/geom_density.html) computes and plots [kernel density estimate](https://en.wikipedia.org/wiki/Kernel_density_estimation), which is a smoothed version of the histogram.\n\nThis is appropriate for **continuous data**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nIt can be used with partitioned data as well.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n### geom_boxplot()\n\n[`geom_boxplot()`](https://ggplot2.tidyverse.org/reference/geom_boxplot.html) displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\n\nIt is appropriate for visualizing the distribution of a dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()            \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n[**Notches**](https://sites.google.com/site/davidsstatistics/home/notched-box-plots) are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\n\nNotches can be used by supplying `notches=true`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n### geom_violin()\n\n[`geom_violin`](https://ggplot2.tidyverse.org/reference/geom_violin.html) is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed **side by side**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n### geom_point()\n\n[`geom_point()`](https://ggplot2.tidyverse.org/reference/geom_point.html) is especially useful for creating scatterplot.\n\nThe plot below shows the plot of Maths and English grades.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()            \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n### Combining geom objects\n\nMultiple geom objects can be combined in a single plot like below, combining a boxplot and scatterplot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n## Statistics\n\nThe [Statistics functions](https://ggplot2.tidyverse.org/reference/#stats) statistically transform data, usually as some form of summary. For example:\n\n-   frequency of values of a variable (bar graph)\n\n    -   a mean\n\n    -   a confidence limit\n\n-   There are two ways to use these functions:\n\n    -   add a `stat_()` function and override the default geom, or\n\n    -   add a `geom_()` function and override the default stat.\n\n### Adding mean to the boxplot\n\nThe boxplot show summary of the dataset based on **quantiles**. Hence, we can see the median but not the mean.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\nWe can add the mean by using the [`stat_summary()`](https://ggplot2.tidyverse.org/reference/stat_summary.html) function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun=\"mean\",         \n               colour =\"red\",        \n               size=4)               \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\nThis adds a red dot corresponding to the mean to the boxplot.\n\n### Generating the stat using the geom\\_() functions\n\nAlternatively, the result above can also be generated by using `geom_point()` with `stat` parameter.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour =\"red\",          \n             size=4)          \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n::: callout-important\nUsing `fun.y` generated the warning below:\n\n```         \nWarning: The `fun.y` argument of `stat_summary()` is deprecated as of ggplot2 3.3.0.\nPlease use the `fun` argument instead.\n```\n\nHence, I replace `fun.y` with just `fun`.\n:::\n\n### Generating best fit curve\n\nBest fit curve can be generated by using [`geom_smooth()`](https://ggplot2.tidyverse.org/reference/geom_smooth.html). We can add this to the English vs Maths scatterplot previously generated.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(linewidth=0.5, color=\"red\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\nWe can also generate a **best fit line** by specifying **method=lm** instead of the default `loess`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=\"lm\", linewidth=0.5, color=\"red\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n## Facets\n\nFacetting generates small multiples (sometimes also called trellis plot), each displaying a **different subset of the data**. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: [`facet_grid()`](https://ggplot2.tidyverse.org/reference/facet_grid.html) and [`facet_wrap`](https://ggplot2.tidyverse.org/reference/facet_wrap.html).\n\n### facet_wrap()\n\n[`facet_wrap`](https://ggplot2.tidyverse.org/reference/facet_wrap.html) wraps a 1d sequence of panels into 2d. This is generally a **better use of screen space** than facet_grid because most displays are roughly rectangular.\n\nThe code chunk below generates multiple histograms for Maths grades for each class.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n### facet_grid()\n\n[`facet_grid()`](https://ggplot2.tidyverse.org/reference/facet_grid.html) forms a matrix of panels defined by row and column facetting variables. It is most useful when you have **two discrete variables**, and **all combinations of the variables exist** in the data.\n\nThe code chunk below visualizes the same data above but using *facet_grid()*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n## Coordinates\n\nThe *Coordinates* functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:\n\n-   [`coord_cartesian()`](https://ggplot2.tidyverse.org/reference/coord_cartesian.html): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out).\n-   [`coord_flip()`](https://ggplot2.tidyverse.org/reference/coord_flip.html): a cartesian system with the x and y flipped.\n-   [`coord_fixed()`](https://ggplot2.tidyverse.org/reference/coord_fixed.html): a cartesian system with a \"fixed\" aspect ratio (e.g. 1.78 for a \"widescreen\" plot).\n-   [`coord_quickmap()`](https://ggplot2.tidyverse.org/reference/coord_map.html):\n\n### Flipping coordinates\n\nBy the default, the bar chart of ggplot2 is in vertical form.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\nWe can transform the **vertical to horizontal bars** by using `coord_flip()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n### Changing axis range\n\nThe scatterplot below may be misleading as the axis range are different.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, linewidth=0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\nThis is because by default, the axis range was **generated based on the min and max values** in the dataset.\n\nWe can **apply context** and set axis ranges based on the real life min and max values (0 and 100, respectively).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n## Themes\n\nThemes control elements of the graph not related to the data. For example:\n\n-   background colour\n\n-   size of fonts\n\n-   gridlines\n\n-   colour of labels\n\nBuilt-in themes include: - `theme_gray()` (default) - `theme_bw()` - `theme_classic()`\n\nA list of theme can be found at this [link](https://ggplot2.tidyverse.org/reference/ggtheme.html). Each theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).\n\nApplying the built-in themes is as simple as applying the `theme_*` functions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_linedraw()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\n# Reflections\n\nDuring ISSS624, although I was using ggplot2, I didn't really understand the principles behind why it must be used in layers. The Grammar of Graphics is the answer to this and provides a framework to generate structured visualizations.\n\n`ggplot2` is indeed useful and multiple elements can be combined in a single plot. However, it is also important to consider how much information is presented by the plot. Too much information can also be confusing and misleading so it is more important to define the **purpose of the plot** to ensure that the elements contribute to the message.\n\nSometimes less is more so just because `ggplot2` can accommodate multiple elements doesn't mean we have to.\n",
    "supporting": [
      "Hands-on_Ex1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}