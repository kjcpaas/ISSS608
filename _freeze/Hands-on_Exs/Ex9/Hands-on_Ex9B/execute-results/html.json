{
  "hash": "3a0fe8c9b18a128de77d1a660c994526",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on Exercise 9B: Visual Correlation Analysis\"\nauthor: \"Kristine Joy Paas\"\ndate: \"13 June 2024\"\ndate-modified: \"last-modified\"\nformat: html\nexecute: \n  echo: true\n  eval: true\n  warning: false\n  freeze: true\n---\n\n\n# 1 Overview\n\nThis hands-on exercise covers [Chapter 6: Visual Correlation Analysis](https://r4va.netlify.app/chap06).\n\nIn this exercise, I learned:\n\n-   how to visuallize correlation matrix\n\n# 2 Getting Started\n\n## 2.1 Loading the required packages\n\nFor this exercise we will use the following R packages:\n\n-   **corrplot**: plotting correlation plot\n\n-   **tidyverse**: data analytics tools for r\n\n-   **ggstatsplot**: adding stats to plots\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(corrplot, ggstatsplot, tidyverse)\n```\n:::\n\n\n## 2.2 Importing data\n\nWe will use `wine_quality.csv` for this exercise\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwine <- read_csv(\"data/wine_quality.csv\")\n\nglimpse(wine)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 6,497\nColumns: 13\n$ `fixed acidity`        <dbl> 7.4, 7.8, 7.8, 11.2, 7.4, 7.4, 7.9, 7.3, 7.8, 7…\n$ `volatile acidity`     <dbl> 0.700, 0.880, 0.760, 0.280, 0.700, 0.660, 0.600…\n$ `citric acid`          <dbl> 0.00, 0.00, 0.04, 0.56, 0.00, 0.00, 0.06, 0.00,…\n$ `residual sugar`       <dbl> 1.9, 2.6, 2.3, 1.9, 1.9, 1.8, 1.6, 1.2, 2.0, 6.…\n$ chlorides              <dbl> 0.076, 0.098, 0.092, 0.075, 0.076, 0.075, 0.069…\n$ `free sulfur dioxide`  <dbl> 11, 25, 15, 17, 11, 13, 15, 15, 9, 17, 15, 17, …\n$ `total sulfur dioxide` <dbl> 34, 67, 54, 60, 34, 40, 59, 21, 18, 102, 65, 10…\n$ density                <dbl> 0.9978, 0.9968, 0.9970, 0.9980, 0.9978, 0.9978,…\n$ pH                     <dbl> 3.51, 3.20, 3.26, 3.16, 3.51, 3.51, 3.30, 3.39,…\n$ sulphates              <dbl> 0.56, 0.68, 0.65, 0.58, 0.56, 0.56, 0.46, 0.47,…\n$ alcohol                <dbl> 9.4, 9.8, 9.8, 9.8, 9.4, 9.4, 9.4, 10.0, 9.5, 1…\n$ quality                <dbl> 5, 5, 5, 6, 5, 5, 5, 7, 7, 5, 5, 5, 5, 5, 5, 5,…\n$ type                   <chr> \"red\", \"red\", \"red\", \"red\", \"red\", \"red\", \"red\"…\n```\n\n\n:::\n:::\n\n\n# 3 Building Correlation Matrix: pairs() method\n\nThere are other ways of building correlation matrix but we will start with `pairs()` first.\n\n## 3.1 Building a basic correlation matrix\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(wine[,1:11])\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex9B_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nThis created **a scatter plot for each pair of columns**.\n\nWe can also change the columns, e.g.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(wine[,2:12])\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex9B_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n## 3.2 Drawing the corners\n\nThe basic graphs are good enough but the pairs are repeated on the upper diagonal and the lower diagonal.\n\nWe can just generate one of the halves.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(wine[,2:12], upper.panel = NULL)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex9B_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nWe can also just render the upper panel:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(wine[,2:12], lower.panel = NULL)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex9B_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n## 3.3 Adding correlation coefficient\n\nWe can also opt to render the correlation coefficients on one of the halves.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npanel.cor <- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr <- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr <- abs(cor(x, y, use=\"complete.obs\"))\ntxt <- format(c(r, 0.123456789), digits=digits)[1]\ntxt <- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,2:12], \n      upper.panel = panel.cor)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex9B_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n# 4 Visualizing Correlation Matrix using *ggcorrmat()*\n\nCorrelation matrices are important in determining which variables/dimensions to include in visualizations or analysis. We can simplify the analysis by only including one of the members of the correlated groups.\n\n## 4.1 The basic plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex9B_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p < 0.05\"\n)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex9B_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n# 5 Building multiple plots\n\nWe can generate \"facets\" of correlogram using *grouped_ggcorrmat()*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrouped_ggcorrmat(\n  data = wine,\n  cor.vars = 1:11,\n  grouping.var = type,\n  type = \"robust\",\n  p.adjust.method = \"holm\",\n  plotgrid.args = list(ncol = 2),\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  annotation.args = list(\n    tag_levels = \"a\",\n    title = \"Correlogram for wine dataset\",\n    subtitle = \"The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity\",\n    caption = \"Dataset: UCI Machine Learning Repository\"\n  )\n)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex9B_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n# 6 Visualizing Correlation Matrix using corrplot Package\n\nThe last way we will explore is the *corrplot()* package.\n\n## 6.1 Computing the correlation matrix\n\nTo use *corrplot()*, we need to compute the correlation matrix first.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwine.cor <- cor(wine[, 1:11])\n```\n:::\n\n\nWe can finally use *corrplot()* to plot the correlation matrix.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex9B_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n## 6.2 Working with visual geometrics\n\nWe can also change the shape in the correlation matrix\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor, \n         method = \"ellipse\") \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex9B_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n## 6.3 Working with layout\n\nWe can also chose to just render a half of the diagonal.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex9B_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nThe plot can be styles as well\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\",\n         diag = FALSE,\n         tl.col = \"black\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex9B_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n## 6.4 Mixed layouts\n\nWe can also generate different visualizations for each of the halves, e.g. geometric and numeric.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex9B_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n## 6.5 Combining corrgram with significant test\n\nWe will fill calculate the *p-values*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwine.sig = cor.mtest(wine.cor, conf.level= .95)\n```\n:::\n\n\nWe will add this to the *p.mat* argument\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         p.mat = wine.sig$p,\n         sig.level = .05)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex9B_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\nThe ones that are crossed out are not correlated.\n\n## 6.6 Reorder a corrgram\n\nMatrix elements can be reordered via the `order` parameter.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"AOE\",\n               tl.col = \"black\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex9B_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n## 6.7 Reordering using hclust\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         order=\"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 3)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex9B_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n# Reflections\n\nWe used correlation graphs in ISSS624 to identify which variables are highly correlated so that we don't include more than 1 of them in the analysis.\n\nHowever, this exercise made me aware that there are more visualization techniques that can be used.\n\nAmong the tools explored here, I prefer `corrplot` the most.\n",
    "supporting": [
      "Hands-on_Ex9B_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}