---
title: "Hands-on Exercise 4A: Visualizing Statistical Analysis"
author: "Kristine Joy Paas"
date: "3 May 2024"
date-modified: "last-modified"
format: html
execute: 
  echo: true
  eval: true
  warning: false
  freeze: true
---

# 1 Overview

This hands-on exercise covers [Chapter 10: Visual Statistical Analysis](https://r4va.netlify.app/chap10).

I learned about the following:

-   creating visual graphics with rich statistical information

# 2 Getting Started

## 2.1 Loading the required packages

For this exercise we will use the following R packages:

-   [**tidyverse**](https://www.tidyverse.org/), a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.

-   [**ggstatsplot**](https://indrajeetpatil.github.io/ggstatsplot/), extension of [**ggplot2**](https://ggplot2.tidyverse.org/) package for creating graphics with details from statistical tests included in the information-rich plots themselves.

-   [**rstantools**](https://cran.r-project.org/package=rstantools), interfaces with [Stan](https://mc-stan.org/) for statistical modeling and high-performance statistical computation

```{r}
#| label: setup
pacman::p_load(tidyverse, ggstatsplot, rstantools)
# Set seed
set.seed(1234)
```

## 2.2 Loading the data

We will use the same `exam_data` dataset from [Hands-on Ex 1](/Hands-on_Exs/Ex1/Hands-on_Ex1) and load it into the RStudio environment using [read_csv()](https://readr.tidyverse.org/reference/read_delim.html).

```{r}
exam_data <- read_csv("data/Exam_data.csv")
glimpse(exam_data)
```

There are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.

-   The categorical attributes are: `ID`, `CLASS`, `GENDER` and `RACE`.

-   The continuous attributes are: `MATHS`, `ENGLISH` and `SCIENCE`.

# 3 Statistical Functions with ggplot2

## 3.1 One-sample test: gghistostats() method

In the code chunk below, [*gghistostats()*](https://indrajeetpatil.github.io/ggstatsplot/reference/gghistostats.html) is used to to build an visual of one-sample test on English scores.

```{r}
gghistostats(
  data = exam_data,
  x = ENGLISH,
  type = "bayes",
  test.value = 60,
  xlab = "English scores"
)
```

The default information included are: - statistical details - Bayes Factor - sample sizes - distribution summary.

## 3.2 Unpacking the Bayes Factor

-   A Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.

-   That’s because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.

-   When we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10. It can be defined mathematically as

$$
\frac{likelihood\ of\ data\ given H_1}{likelihood\ of\ data\ given H_0} = \frac{P(D|H_1)}{P(D|H_0)}
$$

-   The [**Schwarz criterion**](https://www.statisticshowto.com/bayesian-information-criterion/) is one of the easiest ways to calculate rough approximation of the Bayes Factor.

## 3.3 How to interpret Bayes Factor

A **Bayes Factor** can be any positive number. One of the most common interpretations is this one—first proposed by Harold Jeffereys (1961) and slightly modified by [Lee and Wagenmakers](https://www-tandfonline-com.libproxy.smu.edu.sg/doi/pdf/10.1080/00031305.1999.10474443?needAccess=true) in 2013:

![](images/clipboard-2856455611.png){fig-align="center" width="483"}

## 3.4 Two-sample mean test: ggbetweenstats()

In the code chunk below, [*ggbetweenstats()*](https://indrajeetpatil.github.io/ggstatsplot/reference/ggbetweenstats.html) is used to build a visual for two-sample mean test of Maths scores by gender.

```{r}
ggbetweenstats(
  data = exam_data,
  x = GENDER, 
  y = MATHS,
  type = "np",
  messages = FALSE
)
```

The default information included are: - statistical details - Bayes Factor - sample sizes - distribution summary

## 3.5 Oneway ANOVA Test: ggbetweenstats() method

In the code chunk below, [*ggbetweenstats()*](https://indrajeetpatil.github.io/ggstatsplot/reference/ggbetweenstats.html) is used to build a visual for One-way ANOVA test on English score by race.

```{r}
ggbetweenstats(
  data = exam_data,
  x = RACE, 
  y = ENGLISH,
  type = "p",
  mean.ci = TRUE, 
  pairwise.comparisons = TRUE, 
  pairwise.display = "s",
  p.adjust.method = "fdr",
  messages = FALSE
)
```

-   “ns” → only non-significant

-   “s” → only significant

-   “all” → everything

### 3.5.1 Summary of tests

![](images/clipboard-3507947308.png){fig-align="center" width="494"}

![](images/clipboard-2536960366.png){fig-align="center" width="490"}

![](images/clipboard-3952632935.png){fig-align="center" width="488"}

## 3.6 Significant Test of Correlation: ggscatterstats()

In the code chunk below, [*ggscatterstats()*](https://indrajeetpatil.github.io/ggstatsplot/reference/ggscatterstats.html) is used to build a visual for Significant Test of Correlation between Maths scores and English scores.

```{r}
ggscatterstats(
  data = exam_data,
  x = MATHS,
  y = ENGLISH,
  marginal = FALSE,
  )
```

## 3.7 Significant Test of Association (Depedence) : ggbarstats() methods

In the code chunk below, the Maths scores is binned into a 4-class variable by using [*cut()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/cut).

```{r}
exam_binned <- exam_data %>% 
  mutate(MATHS_bins = 
           cut(MATHS, 
               breaks = c(0,60,75,85,100))
)
```

In this code chunk below [*ggbarstats()*](https://indrajeetpatil.github.io/ggstatsplot/reference/ggbarstats.html) is used to build a visual for Significant Test of Association.

```{r}
ggbarstats(exam_binned, 
           x = MATHS_bins, 
           y = GENDER)
```

# 4 Setting up for Visualizations

From this section, we will learn how to visualise model diagnostic and model parameters by using parameters package.

-   Toyota Corolla case study will be used. The purpose of study is to build a model to discover factors affecting prices of used-cars by taking into consideration a set of explanatory variables.

## 4.1 Loading the required packages

We will load additional packages:

```{r}
pacman::p_load(readxl, performance, parameters, see)
```

## 4.2 Importing Excel file: readxl methods

In the code chunk below, [*read_xls()*](https://readxl.tidyverse.org/reference/read_excel.html) of [**readxl**](https://readxl.tidyverse.org/) package is used to import the data worksheet of `ToyotaCorolla.xls` workbook into R.

```{r}
car_resale <- read_xls("data/ToyotaCorolla.xls", 
                       "data")
glimpse(car_resale)
```

# 5 Model Visualization

## 5.1 Multiple Regression Model using lm()

The code chunk below is used to calibrate a multiple linear regression model by using *lm()* of Base Stats of R.

```{r}
model <- lm(Price ~ Age_08_04 + Mfg_Year + KM + 
              Weight + Guarantee_Period, data = car_resale)
model
```

## 5.2 Model Diagnostic: checking for multicolinearity

In the code chunk, [*check_collinearity()*](https://easystats.github.io/performance/reference/check_collinearity.html) of [**performance**](https://easystats.github.io/performance/) package.

```{r}
check_collinearity(model)
```

We can also plot the function result

```{r}
#| eval: false
check_c <- check_collinearity(model)
plot(check_c)
```

::: {.callout-important appearance="minimal"}
Package 'see' is not installing permanently so this does not work
:::

## 5.3 Model Diagnostic: checking normality assumption

In the code chunk, [*check_normality()*](https://easystats.github.io/performance/reference/check_normality.html) of [**performance**](https://easystats.github.io/performance/) package.

```{r}
model1 <- lm(Price ~ Age_08_04 + KM + 
              Weight + Guarantee_Period, data = car_resale)
```

```{r}
check_n <- check_normality(model1)
```

```{r}
#| eval: true
plot(check_n)
```

::: {.callout-important appearance="minimal"}
Package 'see' is not installing permanently so this does not work
:::

## 5.4 Model Diagnostic: Check model for homogeneity of variances

In the code chunk, [*check_heteroscedasticity()*](https://easystats.github.io/performance/reference/check_heteroscedasticity.html) of [**performance**](https://easystats.github.io/performance/) package.

```{r}
check_h <- check_heteroscedasticity(model1)
```

```{r}
plot(check_h)
```

::: {.callout-important appearance="minimal"}
Package 'see' is not installing permanently so this does not work
:::

## 5.5 Model Diagnostic: Complete check

We can also perform the complete by using [*check_model()*](https://easystats.github.io/performance/reference/check_model.html).

```{r}
check_model(model1)
```

::: {.callout-important appearance="minimal"}
Package 'see' is not installing permanently so this does not work
:::

## 5.6 Visualising Regression Parameters: see methods

```{r}
plot(parameters(model1))
```

## 5.7 Visualising Regression Parameters: ggcoefstats() methods

In the code below, [*ggcoefstats()*](https://indrajeetpatil.github.io/ggstatsplot/reference/ggcoefstats.html) of ggstatsplot package to visualise the parameters of a regression model.

```{r}
ggcoefstats(model1, 
            output = "plot")
```

# 6 Reflections

It's great that there are functions to visualizing statistics as from the past exercises, it was such a chore to add even a simple reference line based on median/average, i.e., figure out how to do the stat, render it, annotate. What more for more advanced stats?

I think these functions are useful. However, [see](https://cran.r-project.org/web/packages/see/index.html) package does not install permanently on my machine so anything that uses `plot()` in this exercise did not render as expected.
