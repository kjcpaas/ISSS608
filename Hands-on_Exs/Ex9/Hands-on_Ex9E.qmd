---
title: "Hands-on Exercise 9E: Treemap Visualisation with R"
author: "Kristine Joy Paas"
date: "13 June 2024"
date-modified: "last-modified"
format: html
execute: 
  echo: true
  eval: true
  warning: false
  freeze: true
---

# 1 Overview

This hands-on exercise covers [Chapter 16: Treemap Visualisation with R](https://r4va.netlify.app/chap16).

In this exercise, I learned:

-   Creating Treemap Visualizations

# 2 Getting Started

## 2.1 Loading the required packages

For this exercise we will use the following R packages:

```{r}
pacman::p_load(treemap, treemapify, tidyverse) 
```

## 2.2 Importing data

In this exercise, *REALIS2018.csv* data will be used. This dataset provides information of private property transaction records in 2018. The dataset is extracted from REALIS portal (https://spring.ura.gov.sg/lad/ore/login/index.cfm) of Urban Redevelopment Authority (URA).

```{r}
realis2018 <- read_csv("data/realis2018.csv")

glimpse(realis2018)
```

# 3 Data Wrangling

This dataset contains information about individual transactions. For our visualization, we will aggregate the transactions as treemap visualization is used for visualization aggregated data.

We will aggregate by:

-   *Project Name*

-   *Planning Region*

-   *Planning Area*

-   *Property Type*

-   *Type of Sale*

```{r}
realis2018_summarised <- realis2018 %>% 
  group_by(`Project Name`,`Planning Region`, 
           `Planning Area`, `Property Type`, 
           `Type of Sale`) %>%
  summarise(`Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE), 
            `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),
            `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE),
            `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))
```

# 4 Designing Treemap with with treemap Package

## 4.1 Designing a static treemap

We will first filter Resale records for Condominiums.

```{r}
realis2018_selected <- realis2018_summarised %>%
  filter(`Property Type` == "Condominium", `Type of Sale` == "Resale")
```

## 4.2 Using basic arguments

The code chunk below designed a treemap by using three core arguments of *treemap()*, namely: *index*, *vSize* and *vColor*.

```{r}
treemap(realis2018_selected,
        index=c("Planning Region", "Planning Area", "Project Name"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        title="Resale Condominium by Planning Region and Area, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

## 4.3 Working with *vcolor* and *type* arguments

We will attach the color to the Median unit price. This is so we have information on both:

-   area = total units sold

-   color = median price

```{r}
treemap(realis2018_selected,
        index=c("Planning Region", "Planning Area", "Project Name"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        type = "value",
        title="Resale Condominium by Planning Region and Area, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

## 4.4 The *value* type treemap

```{r}
treemap(realis2018_selected,
        index=c("Planning Region", "Planning Area", "Project Name"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        type="value",
        palette="RdYlBu", 
        title="Resale Condominium by Planning Region and Area, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

This uses a diverging palette (`RdYlBu`) even if there are no negative values so the Reds are not untilized.

## 4.5 The *manual* type treemap

`manual` maps the values to the full color range.

```{r}
treemap(realis2018_selected,
        index=c("Planning Region", "Planning Area", "Project Name"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        type="manual",
        palette="RdYlBu", 
        title="Resale Condominium by Planning Region and Area, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

As previously mentioned, this uses a diverging palette (`RdYlBu`) and the current visualization is confusing as cheapest properties map to **Red**, which is usually perceived as negative.

It is better to use a single color palette as we have no negative prices anyway.

```{r}
treemap(realis2018_selected,
        index=c("Planning Region", "Planning Area", "Project Name"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        type="manual",
        palette="Blues", 
        title="Resale Condominium by Planning Region and Area, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

## 4.6 Treemap Layout

*treemap()* supports two popular treemap layouts, namely: “squarified” and “pivotSize”. The default is “pivotSize”.

The squarified treemap algorithm (Bruls et al., 2000) produces good aspect ratios, but ignores the sorting order of the rectangles (sortID). The ordered treemap, pivot-by-size, algorithm (Bederson et al., 2002) takes the sorting order (sortID) into account while aspect ratios are still acceptable.

## 4.7 Working with *algorithm* argument

The code chunk below plots a squarified treemap by changing the *algorithm* argument.

```{r}
treemap(realis2018_selected,
        index=c("Planning Region", "Planning Area", "Project Name"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        type="manual",
        palette="Blues", 
        algorithm = "squarified",
        title="Resale Condominium by Planning Region and Area, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

## 4.8 Using *sortID*

When “pivotSize” algorithm is used, *sortID* argument can be used to dertemine the order in which the rectangles are placed from top left to bottom right.

```{r}
treemap(realis2018_selected,
        index=c("Planning Region", "Planning Area", "Project Name"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        type="manual",
        palette="Blues", 
        algorithm = "pivotSize",
        sortID = "Median Transacted Price",
        title="Resale Condominium by Planning Region and Area, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

# 5 Designing a Treemap using *treemapify* Package

**treemapify** is a R package specially developed to draw treemaps in **ggplot2**.

## 5.1 Designing a basic treemap

```{r}
ggplot(data=realis2018_selected, 
       aes(area = `Total Unit Sold`,
           fill = `Median Unit Price ($ psm)`),
       layout = "scol",
       start = "bottomleft") + 
  geom_treemap() +
  scale_fill_gradient(low = "light blue", high = "blue")
```

## 5.2 Defining hierarchy

We can group by **planning region**.

```{r}
ggplot(data=realis2018_selected, 
       aes(area = `Total Unit Sold`,
           fill = `Median Unit Price ($ psm)`,
           subgroup = `Planning Region`),
       start = "topleft") + 
  geom_treemap()
```

Similarly, we can also group by **planning area**, or other variables.

```{r}
ggplot(data=realis2018_selected, 
       aes(area = `Total Unit Sold`,
           fill = `Median Unit Price ($ psm)`,
           subgroup = `Planning Region`,
           subgroup2 = `Planning Area`)) + 
  geom_treemap()
```

We can also have boundary lines to separate the areas better.

```{r}
ggplot(data=realis2018_selected, 
       aes(area = `Total Unit Sold`,
           fill = `Median Unit Price ($ psm)`,
           subgroup = `Planning Region`,
           subgroup2 = `Planning Area`)) + 
  geom_treemap() +
  geom_treemap_subgroup2_border(colour = "gray40",
                                size = 2) +
  geom_treemap_subgroup_border(colour = "gray20")
```

# 6 Designing Interactive Treemap using d3treeR

## 6.1 Installing *d3treeR* package

`d3treeR` is not on CRAN so we have to take a different route in installing.

```{r}
#| eval: false
install.packages("devtools")
```

```{r}
#| eval: false
library(devtools)
install_github("timelyportfolio/d3treeR")
```

```{r}
library(d3treeR)
```

## 6.2 Designing an Interactive Treemap

`treemap()` is used to generate a static treemap.

```{r}
tm <- treemap(realis2018_summarised,
        index=c("Planning Region", "Planning Area"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        type="value",
        title="Private Residential Property Sold, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

`d3tree()` is used to build and interactive treemap.

```{r}
d3tree(tm,rootname = "Singapore" )
```

# 7 Reflections

Treemaps are good to visualize the ratios of numbers matching each criteria. This is one of the more aesthetic visualizations, in my opinion. However, I haven't used it much.
